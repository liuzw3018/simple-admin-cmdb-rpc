// Code generated by goctl. DO NOT EDIT.
// Source: cmdb.proto

package cmdbclient

import (
	"context"

	"github.com/liuzw3018/simple-admin-cmdb-rpc/types/cmdb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp         = cmdb.BaseIDResp
	BaseResp           = cmdb.BaseResp
	BaseUUIDResp       = cmdb.BaseUUIDResp
	CmdbAssetsInfo     = cmdb.CmdbAssetsInfo
	CmdbAssetsListReq  = cmdb.CmdbAssetsListReq
	CmdbAssetsListResp = cmdb.CmdbAssetsListResp
	CmdbIpInfo         = cmdb.CmdbIpInfo
	CmdbIpListReq      = cmdb.CmdbIpListReq
	CmdbIpListResp     = cmdb.CmdbIpListResp
	CmdbIpUserInfo     = cmdb.CmdbIpUserInfo
	CmdbIpUserListReq  = cmdb.CmdbIpUserListReq
	CmdbIpUserListResp = cmdb.CmdbIpUserListResp
	Empty              = cmdb.Empty
	IDReq              = cmdb.IDReq
	IDsReq             = cmdb.IDsReq
	PageInfoReq        = cmdb.PageInfoReq
	UUIDReq            = cmdb.UUIDReq
	UUIDsReq           = cmdb.UUIDsReq

	Cmdb interface {
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		// CmdbAssets management
		CreateCmdbAssets(ctx context.Context, in *CmdbAssetsInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateCmdbAssets(ctx context.Context, in *CmdbAssetsInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetCmdbAssetsList(ctx context.Context, in *CmdbAssetsListReq, opts ...grpc.CallOption) (*CmdbAssetsListResp, error)
		GetCmdbAssetsById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbAssetsInfo, error)
		DeleteCmdbAssets(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// CmdbIp management
		CreateCmdbIp(ctx context.Context, in *CmdbIpInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateCmdbIp(ctx context.Context, in *CmdbIpInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetCmdbIpList(ctx context.Context, in *CmdbIpListReq, opts ...grpc.CallOption) (*CmdbIpListResp, error)
		GetCmdbIpById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbIpInfo, error)
		DeleteCmdbIp(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// CmdbIpUser management
		CreateCmdbIpUser(ctx context.Context, in *CmdbIpUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateCmdbIpUser(ctx context.Context, in *CmdbIpUserInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetCmdbIpUserList(ctx context.Context, in *CmdbIpUserListReq, opts ...grpc.CallOption) (*CmdbIpUserListResp, error)
		GetCmdbIpUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbIpUserInfo, error)
		DeleteCmdbIpUser(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultCmdb struct {
		cli zrpc.Client
	}
)

func NewCmdb(cli zrpc.Client) Cmdb {
	return &defaultCmdb{
		cli: cli,
	}
}

func (m *defaultCmdb) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

// CmdbAssets management
func (m *defaultCmdb) CreateCmdbAssets(ctx context.Context, in *CmdbAssetsInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.CreateCmdbAssets(ctx, in, opts...)
}

func (m *defaultCmdb) UpdateCmdbAssets(ctx context.Context, in *CmdbAssetsInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.UpdateCmdbAssets(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbAssetsList(ctx context.Context, in *CmdbAssetsListReq, opts ...grpc.CallOption) (*CmdbAssetsListResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbAssetsList(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbAssetsById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbAssetsInfo, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbAssetsById(ctx, in, opts...)
}

func (m *defaultCmdb) DeleteCmdbAssets(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.DeleteCmdbAssets(ctx, in, opts...)
}

// CmdbIp management
func (m *defaultCmdb) CreateCmdbIp(ctx context.Context, in *CmdbIpInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.CreateCmdbIp(ctx, in, opts...)
}

func (m *defaultCmdb) UpdateCmdbIp(ctx context.Context, in *CmdbIpInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.UpdateCmdbIp(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbIpList(ctx context.Context, in *CmdbIpListReq, opts ...grpc.CallOption) (*CmdbIpListResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbIpList(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbIpById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbIpInfo, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbIpById(ctx, in, opts...)
}

func (m *defaultCmdb) DeleteCmdbIp(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.DeleteCmdbIp(ctx, in, opts...)
}

// CmdbIpUser management
func (m *defaultCmdb) CreateCmdbIpUser(ctx context.Context, in *CmdbIpUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.CreateCmdbIpUser(ctx, in, opts...)
}

func (m *defaultCmdb) UpdateCmdbIpUser(ctx context.Context, in *CmdbIpUserInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.UpdateCmdbIpUser(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbIpUserList(ctx context.Context, in *CmdbIpUserListReq, opts ...grpc.CallOption) (*CmdbIpUserListResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbIpUserList(ctx, in, opts...)
}

func (m *defaultCmdb) GetCmdbIpUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CmdbIpUserInfo, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.GetCmdbIpUserById(ctx, in, opts...)
}

func (m *defaultCmdb) DeleteCmdbIpUser(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := cmdb.NewCmdbClient(m.cli.Conn())
	return client.DeleteCmdbIpUser(ctx, in, opts...)
}
