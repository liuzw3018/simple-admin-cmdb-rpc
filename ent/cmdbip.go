// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbip"
)

// CmdbIp is the model entity for the CmdbIp schema.
type CmdbIp struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户
	User string `json:"user,omitempty"`
	// 部门
	Department string `json:"department,omitempty"`
	// 联系方式
	Mobile string `json:"mobile,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// IP
	IP string `json:"ip,omitempty"`
	// 掩码
	Mask string `json:"mask,omitempty"`
	// 网关
	Gateway string `json:"gateway,omitempty"`
	// 上线时间
	OnlineTime time.Time `json:"online_time,omitempty"`
	// 下线时间
	OfflineTime time.Time `json:"offline_time,omitempty"`
	// 是否空闲 | 1: 空闲 | 0: 使用中
	IsLeisure uint `json:"is_leisure,omitempty"`
	// 设备类型 | 服务器 | 网络设备 | 存储设备 | PC | 其他
	DeviceType   string `json:"device_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CmdbIp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cmdbip.FieldID, cmdbip.FieldIsLeisure:
			values[i] = new(sql.NullInt64)
		case cmdbip.FieldUser, cmdbip.FieldDepartment, cmdbip.FieldMobile, cmdbip.FieldRemark, cmdbip.FieldIP, cmdbip.FieldMask, cmdbip.FieldGateway, cmdbip.FieldDeviceType:
			values[i] = new(sql.NullString)
		case cmdbip.FieldCreatedAt, cmdbip.FieldUpdatedAt, cmdbip.FieldOnlineTime, cmdbip.FieldOfflineTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CmdbIp fields.
func (ci *CmdbIp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cmdbip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = uint64(value.Int64)
		case cmdbip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case cmdbip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case cmdbip.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				ci.User = value.String
			}
		case cmdbip.FieldDepartment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department", values[i])
			} else if value.Valid {
				ci.Department = value.String
			}
		case cmdbip.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				ci.Mobile = value.String
			}
		case cmdbip.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ci.Remark = value.String
			}
		case cmdbip.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ci.IP = value.String
			}
		case cmdbip.FieldMask:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mask", values[i])
			} else if value.Valid {
				ci.Mask = value.String
			}
		case cmdbip.FieldGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway", values[i])
			} else if value.Valid {
				ci.Gateway = value.String
			}
		case cmdbip.FieldOnlineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field online_time", values[i])
			} else if value.Valid {
				ci.OnlineTime = value.Time
			}
		case cmdbip.FieldOfflineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field offline_time", values[i])
			} else if value.Valid {
				ci.OfflineTime = value.Time
			}
		case cmdbip.FieldIsLeisure:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_leisure", values[i])
			} else if value.Valid {
				ci.IsLeisure = uint(value.Int64)
			}
		case cmdbip.FieldDeviceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_type", values[i])
			} else if value.Valid {
				ci.DeviceType = value.String
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CmdbIp.
// This includes values selected through modifiers, order, etc.
func (ci *CmdbIp) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// Update returns a builder for updating this CmdbIp.
// Note that you need to call CmdbIp.Unwrap() before calling this method if this CmdbIp
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CmdbIp) Update() *CmdbIpUpdateOne {
	return NewCmdbIpClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the CmdbIp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CmdbIp) Unwrap() *CmdbIp {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CmdbIp is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CmdbIp) String() string {
	var builder strings.Builder
	builder.WriteString("CmdbIp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(ci.User)
	builder.WriteString(", ")
	builder.WriteString("department=")
	builder.WriteString(ci.Department)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(ci.Mobile)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ci.Remark)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ci.IP)
	builder.WriteString(", ")
	builder.WriteString("mask=")
	builder.WriteString(ci.Mask)
	builder.WriteString(", ")
	builder.WriteString("gateway=")
	builder.WriteString(ci.Gateway)
	builder.WriteString(", ")
	builder.WriteString("online_time=")
	builder.WriteString(ci.OnlineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("offline_time=")
	builder.WriteString(ci.OfflineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_leisure=")
	builder.WriteString(fmt.Sprintf("%v", ci.IsLeisure))
	builder.WriteString(", ")
	builder.WriteString("device_type=")
	builder.WriteString(ci.DeviceType)
	builder.WriteByte(')')
	return builder.String()
}

// CmdbIps is a parsable slice of CmdbIp.
type CmdbIps []*CmdbIp
