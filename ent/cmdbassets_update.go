// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbassets"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/predicate"
)

// CmdbAssetsUpdate is the builder for updating CmdbAssets entities.
type CmdbAssetsUpdate struct {
	config
	hooks    []Hook
	mutation *CmdbAssetsMutation
}

// Where appends a list predicates to the CmdbAssetsUpdate builder.
func (cau *CmdbAssetsUpdate) Where(ps ...predicate.CmdbAssets) *CmdbAssetsUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CmdbAssetsUpdate) SetUpdatedAt(t time.Time) *CmdbAssetsUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetUser sets the "user" field.
func (cau *CmdbAssetsUpdate) SetUser(s string) *CmdbAssetsUpdate {
	cau.mutation.SetUser(s)
	return cau
}

// SetDepartment sets the "department" field.
func (cau *CmdbAssetsUpdate) SetDepartment(s string) *CmdbAssetsUpdate {
	cau.mutation.SetDepartment(s)
	return cau
}

// SetMobile sets the "mobile" field.
func (cau *CmdbAssetsUpdate) SetMobile(s string) *CmdbAssetsUpdate {
	cau.mutation.SetMobile(s)
	return cau
}

// SetRemark sets the "remark" field.
func (cau *CmdbAssetsUpdate) SetRemark(s string) *CmdbAssetsUpdate {
	cau.mutation.SetRemark(s)
	return cau
}

// SetIP sets the "ip" field.
func (cau *CmdbAssetsUpdate) SetIP(s string) *CmdbAssetsUpdate {
	cau.mutation.SetIP(s)
	return cau
}

// SetMask sets the "mask" field.
func (cau *CmdbAssetsUpdate) SetMask(s string) *CmdbAssetsUpdate {
	cau.mutation.SetMask(s)
	return cau
}

// SetGateway sets the "gateway" field.
func (cau *CmdbAssetsUpdate) SetGateway(s string) *CmdbAssetsUpdate {
	cau.mutation.SetGateway(s)
	return cau
}

// SetOnlineTime sets the "online_time" field.
func (cau *CmdbAssetsUpdate) SetOnlineTime(t time.Time) *CmdbAssetsUpdate {
	cau.mutation.SetOnlineTime(t)
	return cau
}

// SetOfflineTime sets the "offline_time" field.
func (cau *CmdbAssetsUpdate) SetOfflineTime(t time.Time) *CmdbAssetsUpdate {
	cau.mutation.SetOfflineTime(t)
	return cau
}

// SetPowerStatus sets the "power_status" field.
func (cau *CmdbAssetsUpdate) SetPowerStatus(u uint) *CmdbAssetsUpdate {
	cau.mutation.ResetPowerStatus()
	cau.mutation.SetPowerStatus(u)
	return cau
}

// SetNillablePowerStatus sets the "power_status" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillablePowerStatus(u *uint) *CmdbAssetsUpdate {
	if u != nil {
		cau.SetPowerStatus(*u)
	}
	return cau
}

// AddPowerStatus adds u to the "power_status" field.
func (cau *CmdbAssetsUpdate) AddPowerStatus(u int) *CmdbAssetsUpdate {
	cau.mutation.AddPowerStatus(u)
	return cau
}

// SetIsServer sets the "is_server" field.
func (cau *CmdbAssetsUpdate) SetIsServer(u uint) *CmdbAssetsUpdate {
	cau.mutation.ResetIsServer()
	cau.mutation.SetIsServer(u)
	return cau
}

// SetNillableIsServer sets the "is_server" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableIsServer(u *uint) *CmdbAssetsUpdate {
	if u != nil {
		cau.SetIsServer(*u)
	}
	return cau
}

// AddIsServer adds u to the "is_server" field.
func (cau *CmdbAssetsUpdate) AddIsServer(u int) *CmdbAssetsUpdate {
	cau.mutation.AddIsServer(u)
	return cau
}

// SetServerType sets the "server_type" field.
func (cau *CmdbAssetsUpdate) SetServerType(u uint) *CmdbAssetsUpdate {
	cau.mutation.ResetServerType()
	cau.mutation.SetServerType(u)
	return cau
}

// SetNillableServerType sets the "server_type" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableServerType(u *uint) *CmdbAssetsUpdate {
	if u != nil {
		cau.SetServerType(*u)
	}
	return cau
}

// AddServerType adds u to the "server_type" field.
func (cau *CmdbAssetsUpdate) AddServerType(u int) *CmdbAssetsUpdate {
	cau.mutation.AddServerType(u)
	return cau
}

// SetServerHostname sets the "server_hostname" field.
func (cau *CmdbAssetsUpdate) SetServerHostname(s string) *CmdbAssetsUpdate {
	cau.mutation.SetServerHostname(s)
	return cau
}

// SetNillableServerHostname sets the "server_hostname" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableServerHostname(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetServerHostname(*s)
	}
	return cau
}

// SetServerOs sets the "server_os" field.
func (cau *CmdbAssetsUpdate) SetServerOs(s string) *CmdbAssetsUpdate {
	cau.mutation.SetServerOs(s)
	return cau
}

// SetNillableServerOs sets the "server_os" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableServerOs(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetServerOs(*s)
	}
	return cau
}

// SetServerOsVersion sets the "server_os_version" field.
func (cau *CmdbAssetsUpdate) SetServerOsVersion(s string) *CmdbAssetsUpdate {
	cau.mutation.SetServerOsVersion(s)
	return cau
}

// SetNillableServerOsVersion sets the "server_os_version" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableServerOsVersion(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetServerOsVersion(*s)
	}
	return cau
}

// SetServerOsArch sets the "server_os_arch" field.
func (cau *CmdbAssetsUpdate) SetServerOsArch(s string) *CmdbAssetsUpdate {
	cau.mutation.SetServerOsArch(s)
	return cau
}

// SetNillableServerOsArch sets the "server_os_arch" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableServerOsArch(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetServerOsArch(*s)
	}
	return cau
}

// SetCPU sets the "cpu" field.
func (cau *CmdbAssetsUpdate) SetCPU(s string) *CmdbAssetsUpdate {
	cau.mutation.SetCPU(s)
	return cau
}

// SetMemory sets the "memory" field.
func (cau *CmdbAssetsUpdate) SetMemory(s string) *CmdbAssetsUpdate {
	cau.mutation.SetMemory(s)
	return cau
}

// SetDisk sets the "disk" field.
func (cau *CmdbAssetsUpdate) SetDisk(s string) *CmdbAssetsUpdate {
	cau.mutation.SetDisk(s)
	return cau
}

// SetNetworkSpeed sets the "NetworkSpeed" field.
func (cau *CmdbAssetsUpdate) SetNetworkSpeed(s string) *CmdbAssetsUpdate {
	cau.mutation.SetNetworkSpeed(s)
	return cau
}

// SetNillableNetworkSpeed sets the "NetworkSpeed" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableNetworkSpeed(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetNetworkSpeed(*s)
	}
	return cau
}

// SetDeviceAddress sets the "device_address" field.
func (cau *CmdbAssetsUpdate) SetDeviceAddress(s string) *CmdbAssetsUpdate {
	cau.mutation.SetDeviceAddress(s)
	return cau
}

// SetNillableDeviceAddress sets the "device_address" field if the given value is not nil.
func (cau *CmdbAssetsUpdate) SetNillableDeviceAddress(s *string) *CmdbAssetsUpdate {
	if s != nil {
		cau.SetDeviceAddress(*s)
	}
	return cau
}

// Mutation returns the CmdbAssetsMutation object of the builder.
func (cau *CmdbAssetsUpdate) Mutation() *CmdbAssetsMutation {
	return cau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CmdbAssetsUpdate) Save(ctx context.Context) (int, error) {
	cau.defaults()
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CmdbAssetsUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CmdbAssetsUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CmdbAssetsUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CmdbAssetsUpdate) defaults() {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		v := cmdbassets.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CmdbAssetsUpdate) check() error {
	if v, ok := cau.mutation.Mobile(); ok {
		if err := cmdbassets.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "CmdbAssets.mobile": %w`, err)}
		}
	}
	return nil
}

func (cau *CmdbAssetsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cmdbassets.Table, cmdbassets.Columns, sqlgraph.NewFieldSpec(cmdbassets.FieldID, field.TypeUint64))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(cmdbassets.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cau.mutation.User(); ok {
		_spec.SetField(cmdbassets.FieldUser, field.TypeString, value)
	}
	if value, ok := cau.mutation.Department(); ok {
		_spec.SetField(cmdbassets.FieldDepartment, field.TypeString, value)
	}
	if value, ok := cau.mutation.Mobile(); ok {
		_spec.SetField(cmdbassets.FieldMobile, field.TypeString, value)
	}
	if value, ok := cau.mutation.Remark(); ok {
		_spec.SetField(cmdbassets.FieldRemark, field.TypeString, value)
	}
	if value, ok := cau.mutation.IP(); ok {
		_spec.SetField(cmdbassets.FieldIP, field.TypeString, value)
	}
	if value, ok := cau.mutation.Mask(); ok {
		_spec.SetField(cmdbassets.FieldMask, field.TypeString, value)
	}
	if value, ok := cau.mutation.Gateway(); ok {
		_spec.SetField(cmdbassets.FieldGateway, field.TypeString, value)
	}
	if value, ok := cau.mutation.OnlineTime(); ok {
		_spec.SetField(cmdbassets.FieldOnlineTime, field.TypeTime, value)
	}
	if value, ok := cau.mutation.OfflineTime(); ok {
		_spec.SetField(cmdbassets.FieldOfflineTime, field.TypeTime, value)
	}
	if value, ok := cau.mutation.PowerStatus(); ok {
		_spec.SetField(cmdbassets.FieldPowerStatus, field.TypeUint, value)
	}
	if value, ok := cau.mutation.AddedPowerStatus(); ok {
		_spec.AddField(cmdbassets.FieldPowerStatus, field.TypeUint, value)
	}
	if value, ok := cau.mutation.IsServer(); ok {
		_spec.SetField(cmdbassets.FieldIsServer, field.TypeUint, value)
	}
	if value, ok := cau.mutation.AddedIsServer(); ok {
		_spec.AddField(cmdbassets.FieldIsServer, field.TypeUint, value)
	}
	if value, ok := cau.mutation.ServerType(); ok {
		_spec.SetField(cmdbassets.FieldServerType, field.TypeUint, value)
	}
	if value, ok := cau.mutation.AddedServerType(); ok {
		_spec.AddField(cmdbassets.FieldServerType, field.TypeUint, value)
	}
	if value, ok := cau.mutation.ServerHostname(); ok {
		_spec.SetField(cmdbassets.FieldServerHostname, field.TypeString, value)
	}
	if value, ok := cau.mutation.ServerOs(); ok {
		_spec.SetField(cmdbassets.FieldServerOs, field.TypeString, value)
	}
	if value, ok := cau.mutation.ServerOsVersion(); ok {
		_spec.SetField(cmdbassets.FieldServerOsVersion, field.TypeString, value)
	}
	if value, ok := cau.mutation.ServerOsArch(); ok {
		_spec.SetField(cmdbassets.FieldServerOsArch, field.TypeString, value)
	}
	if value, ok := cau.mutation.CPU(); ok {
		_spec.SetField(cmdbassets.FieldCPU, field.TypeString, value)
	}
	if value, ok := cau.mutation.Memory(); ok {
		_spec.SetField(cmdbassets.FieldMemory, field.TypeString, value)
	}
	if value, ok := cau.mutation.Disk(); ok {
		_spec.SetField(cmdbassets.FieldDisk, field.TypeString, value)
	}
	if value, ok := cau.mutation.NetworkSpeed(); ok {
		_spec.SetField(cmdbassets.FieldNetworkSpeed, field.TypeString, value)
	}
	if value, ok := cau.mutation.DeviceAddress(); ok {
		_spec.SetField(cmdbassets.FieldDeviceAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmdbassets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CmdbAssetsUpdateOne is the builder for updating a single CmdbAssets entity.
type CmdbAssetsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CmdbAssetsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CmdbAssetsUpdateOne) SetUpdatedAt(t time.Time) *CmdbAssetsUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetUser sets the "user" field.
func (cauo *CmdbAssetsUpdateOne) SetUser(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetUser(s)
	return cauo
}

// SetDepartment sets the "department" field.
func (cauo *CmdbAssetsUpdateOne) SetDepartment(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetDepartment(s)
	return cauo
}

// SetMobile sets the "mobile" field.
func (cauo *CmdbAssetsUpdateOne) SetMobile(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetMobile(s)
	return cauo
}

// SetRemark sets the "remark" field.
func (cauo *CmdbAssetsUpdateOne) SetRemark(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetRemark(s)
	return cauo
}

// SetIP sets the "ip" field.
func (cauo *CmdbAssetsUpdateOne) SetIP(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetIP(s)
	return cauo
}

// SetMask sets the "mask" field.
func (cauo *CmdbAssetsUpdateOne) SetMask(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetMask(s)
	return cauo
}

// SetGateway sets the "gateway" field.
func (cauo *CmdbAssetsUpdateOne) SetGateway(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetGateway(s)
	return cauo
}

// SetOnlineTime sets the "online_time" field.
func (cauo *CmdbAssetsUpdateOne) SetOnlineTime(t time.Time) *CmdbAssetsUpdateOne {
	cauo.mutation.SetOnlineTime(t)
	return cauo
}

// SetOfflineTime sets the "offline_time" field.
func (cauo *CmdbAssetsUpdateOne) SetOfflineTime(t time.Time) *CmdbAssetsUpdateOne {
	cauo.mutation.SetOfflineTime(t)
	return cauo
}

// SetPowerStatus sets the "power_status" field.
func (cauo *CmdbAssetsUpdateOne) SetPowerStatus(u uint) *CmdbAssetsUpdateOne {
	cauo.mutation.ResetPowerStatus()
	cauo.mutation.SetPowerStatus(u)
	return cauo
}

// SetNillablePowerStatus sets the "power_status" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillablePowerStatus(u *uint) *CmdbAssetsUpdateOne {
	if u != nil {
		cauo.SetPowerStatus(*u)
	}
	return cauo
}

// AddPowerStatus adds u to the "power_status" field.
func (cauo *CmdbAssetsUpdateOne) AddPowerStatus(u int) *CmdbAssetsUpdateOne {
	cauo.mutation.AddPowerStatus(u)
	return cauo
}

// SetIsServer sets the "is_server" field.
func (cauo *CmdbAssetsUpdateOne) SetIsServer(u uint) *CmdbAssetsUpdateOne {
	cauo.mutation.ResetIsServer()
	cauo.mutation.SetIsServer(u)
	return cauo
}

// SetNillableIsServer sets the "is_server" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableIsServer(u *uint) *CmdbAssetsUpdateOne {
	if u != nil {
		cauo.SetIsServer(*u)
	}
	return cauo
}

// AddIsServer adds u to the "is_server" field.
func (cauo *CmdbAssetsUpdateOne) AddIsServer(u int) *CmdbAssetsUpdateOne {
	cauo.mutation.AddIsServer(u)
	return cauo
}

// SetServerType sets the "server_type" field.
func (cauo *CmdbAssetsUpdateOne) SetServerType(u uint) *CmdbAssetsUpdateOne {
	cauo.mutation.ResetServerType()
	cauo.mutation.SetServerType(u)
	return cauo
}

// SetNillableServerType sets the "server_type" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableServerType(u *uint) *CmdbAssetsUpdateOne {
	if u != nil {
		cauo.SetServerType(*u)
	}
	return cauo
}

// AddServerType adds u to the "server_type" field.
func (cauo *CmdbAssetsUpdateOne) AddServerType(u int) *CmdbAssetsUpdateOne {
	cauo.mutation.AddServerType(u)
	return cauo
}

// SetServerHostname sets the "server_hostname" field.
func (cauo *CmdbAssetsUpdateOne) SetServerHostname(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetServerHostname(s)
	return cauo
}

// SetNillableServerHostname sets the "server_hostname" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableServerHostname(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetServerHostname(*s)
	}
	return cauo
}

// SetServerOs sets the "server_os" field.
func (cauo *CmdbAssetsUpdateOne) SetServerOs(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetServerOs(s)
	return cauo
}

// SetNillableServerOs sets the "server_os" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableServerOs(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetServerOs(*s)
	}
	return cauo
}

// SetServerOsVersion sets the "server_os_version" field.
func (cauo *CmdbAssetsUpdateOne) SetServerOsVersion(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetServerOsVersion(s)
	return cauo
}

// SetNillableServerOsVersion sets the "server_os_version" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableServerOsVersion(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetServerOsVersion(*s)
	}
	return cauo
}

// SetServerOsArch sets the "server_os_arch" field.
func (cauo *CmdbAssetsUpdateOne) SetServerOsArch(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetServerOsArch(s)
	return cauo
}

// SetNillableServerOsArch sets the "server_os_arch" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableServerOsArch(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetServerOsArch(*s)
	}
	return cauo
}

// SetCPU sets the "cpu" field.
func (cauo *CmdbAssetsUpdateOne) SetCPU(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetCPU(s)
	return cauo
}

// SetMemory sets the "memory" field.
func (cauo *CmdbAssetsUpdateOne) SetMemory(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetMemory(s)
	return cauo
}

// SetDisk sets the "disk" field.
func (cauo *CmdbAssetsUpdateOne) SetDisk(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetDisk(s)
	return cauo
}

// SetNetworkSpeed sets the "NetworkSpeed" field.
func (cauo *CmdbAssetsUpdateOne) SetNetworkSpeed(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetNetworkSpeed(s)
	return cauo
}

// SetNillableNetworkSpeed sets the "NetworkSpeed" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableNetworkSpeed(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetNetworkSpeed(*s)
	}
	return cauo
}

// SetDeviceAddress sets the "device_address" field.
func (cauo *CmdbAssetsUpdateOne) SetDeviceAddress(s string) *CmdbAssetsUpdateOne {
	cauo.mutation.SetDeviceAddress(s)
	return cauo
}

// SetNillableDeviceAddress sets the "device_address" field if the given value is not nil.
func (cauo *CmdbAssetsUpdateOne) SetNillableDeviceAddress(s *string) *CmdbAssetsUpdateOne {
	if s != nil {
		cauo.SetDeviceAddress(*s)
	}
	return cauo
}

// Mutation returns the CmdbAssetsMutation object of the builder.
func (cauo *CmdbAssetsUpdateOne) Mutation() *CmdbAssetsMutation {
	return cauo.mutation
}

// Where appends a list predicates to the CmdbAssetsUpdate builder.
func (cauo *CmdbAssetsUpdateOne) Where(ps ...predicate.CmdbAssets) *CmdbAssetsUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CmdbAssetsUpdateOne) Select(field string, fields ...string) *CmdbAssetsUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CmdbAssets entity.
func (cauo *CmdbAssetsUpdateOne) Save(ctx context.Context) (*CmdbAssets, error) {
	cauo.defaults()
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CmdbAssetsUpdateOne) SaveX(ctx context.Context) *CmdbAssets {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CmdbAssetsUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CmdbAssetsUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CmdbAssetsUpdateOne) defaults() {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		v := cmdbassets.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CmdbAssetsUpdateOne) check() error {
	if v, ok := cauo.mutation.Mobile(); ok {
		if err := cmdbassets.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "CmdbAssets.mobile": %w`, err)}
		}
	}
	return nil
}

func (cauo *CmdbAssetsUpdateOne) sqlSave(ctx context.Context) (_node *CmdbAssets, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cmdbassets.Table, cmdbassets.Columns, sqlgraph.NewFieldSpec(cmdbassets.FieldID, field.TypeUint64))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CmdbAssets.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cmdbassets.FieldID)
		for _, f := range fields {
			if !cmdbassets.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cmdbassets.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(cmdbassets.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.User(); ok {
		_spec.SetField(cmdbassets.FieldUser, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Department(); ok {
		_spec.SetField(cmdbassets.FieldDepartment, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Mobile(); ok {
		_spec.SetField(cmdbassets.FieldMobile, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Remark(); ok {
		_spec.SetField(cmdbassets.FieldRemark, field.TypeString, value)
	}
	if value, ok := cauo.mutation.IP(); ok {
		_spec.SetField(cmdbassets.FieldIP, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Mask(); ok {
		_spec.SetField(cmdbassets.FieldMask, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Gateway(); ok {
		_spec.SetField(cmdbassets.FieldGateway, field.TypeString, value)
	}
	if value, ok := cauo.mutation.OnlineTime(); ok {
		_spec.SetField(cmdbassets.FieldOnlineTime, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.OfflineTime(); ok {
		_spec.SetField(cmdbassets.FieldOfflineTime, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.PowerStatus(); ok {
		_spec.SetField(cmdbassets.FieldPowerStatus, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.AddedPowerStatus(); ok {
		_spec.AddField(cmdbassets.FieldPowerStatus, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.IsServer(); ok {
		_spec.SetField(cmdbassets.FieldIsServer, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.AddedIsServer(); ok {
		_spec.AddField(cmdbassets.FieldIsServer, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.ServerType(); ok {
		_spec.SetField(cmdbassets.FieldServerType, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.AddedServerType(); ok {
		_spec.AddField(cmdbassets.FieldServerType, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.ServerHostname(); ok {
		_spec.SetField(cmdbassets.FieldServerHostname, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ServerOs(); ok {
		_spec.SetField(cmdbassets.FieldServerOs, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ServerOsVersion(); ok {
		_spec.SetField(cmdbassets.FieldServerOsVersion, field.TypeString, value)
	}
	if value, ok := cauo.mutation.ServerOsArch(); ok {
		_spec.SetField(cmdbassets.FieldServerOsArch, field.TypeString, value)
	}
	if value, ok := cauo.mutation.CPU(); ok {
		_spec.SetField(cmdbassets.FieldCPU, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Memory(); ok {
		_spec.SetField(cmdbassets.FieldMemory, field.TypeString, value)
	}
	if value, ok := cauo.mutation.Disk(); ok {
		_spec.SetField(cmdbassets.FieldDisk, field.TypeString, value)
	}
	if value, ok := cauo.mutation.NetworkSpeed(); ok {
		_spec.SetField(cmdbassets.FieldNetworkSpeed, field.TypeString, value)
	}
	if value, ok := cauo.mutation.DeviceAddress(); ok {
		_spec.SetField(cmdbassets.FieldDeviceAddress, field.TypeString, value)
	}
	_node = &CmdbAssets{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmdbassets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
