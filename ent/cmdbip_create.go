// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbip"
)

// CmdbIpCreate is the builder for creating a CmdbIp entity.
type CmdbIpCreate struct {
	config
	mutation *CmdbIpMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cic *CmdbIpCreate) SetCreatedAt(t time.Time) *CmdbIpCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CmdbIpCreate) SetNillableCreatedAt(t *time.Time) *CmdbIpCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CmdbIpCreate) SetUpdatedAt(t time.Time) *CmdbIpCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CmdbIpCreate) SetNillableUpdatedAt(t *time.Time) *CmdbIpCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetUser sets the "user" field.
func (cic *CmdbIpCreate) SetUser(s string) *CmdbIpCreate {
	cic.mutation.SetUser(s)
	return cic
}

// SetDepartment sets the "department" field.
func (cic *CmdbIpCreate) SetDepartment(s string) *CmdbIpCreate {
	cic.mutation.SetDepartment(s)
	return cic
}

// SetMobile sets the "mobile" field.
func (cic *CmdbIpCreate) SetMobile(s string) *CmdbIpCreate {
	cic.mutation.SetMobile(s)
	return cic
}

// SetRemark sets the "remark" field.
func (cic *CmdbIpCreate) SetRemark(s string) *CmdbIpCreate {
	cic.mutation.SetRemark(s)
	return cic
}

// SetIP sets the "ip" field.
func (cic *CmdbIpCreate) SetIP(s string) *CmdbIpCreate {
	cic.mutation.SetIP(s)
	return cic
}

// SetMask sets the "mask" field.
func (cic *CmdbIpCreate) SetMask(s string) *CmdbIpCreate {
	cic.mutation.SetMask(s)
	return cic
}

// SetGateway sets the "gateway" field.
func (cic *CmdbIpCreate) SetGateway(s string) *CmdbIpCreate {
	cic.mutation.SetGateway(s)
	return cic
}

// SetOnlineTime sets the "online_time" field.
func (cic *CmdbIpCreate) SetOnlineTime(t time.Time) *CmdbIpCreate {
	cic.mutation.SetOnlineTime(t)
	return cic
}

// SetOfflineTime sets the "offline_time" field.
func (cic *CmdbIpCreate) SetOfflineTime(t time.Time) *CmdbIpCreate {
	cic.mutation.SetOfflineTime(t)
	return cic
}

// SetIsLeisure sets the "is_leisure" field.
func (cic *CmdbIpCreate) SetIsLeisure(u uint) *CmdbIpCreate {
	cic.mutation.SetIsLeisure(u)
	return cic
}

// SetNillableIsLeisure sets the "is_leisure" field if the given value is not nil.
func (cic *CmdbIpCreate) SetNillableIsLeisure(u *uint) *CmdbIpCreate {
	if u != nil {
		cic.SetIsLeisure(*u)
	}
	return cic
}

// SetDeviceType sets the "device_type" field.
func (cic *CmdbIpCreate) SetDeviceType(s string) *CmdbIpCreate {
	cic.mutation.SetDeviceType(s)
	return cic
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (cic *CmdbIpCreate) SetNillableDeviceType(s *string) *CmdbIpCreate {
	if s != nil {
		cic.SetDeviceType(*s)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *CmdbIpCreate) SetID(u uint64) *CmdbIpCreate {
	cic.mutation.SetID(u)
	return cic
}

// Mutation returns the CmdbIpMutation object of the builder.
func (cic *CmdbIpCreate) Mutation() *CmdbIpMutation {
	return cic.mutation
}

// Save creates the CmdbIp in the database.
func (cic *CmdbIpCreate) Save(ctx context.Context) (*CmdbIp, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CmdbIpCreate) SaveX(ctx context.Context) *CmdbIp {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CmdbIpCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CmdbIpCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CmdbIpCreate) defaults() {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := cmdbip.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		v := cmdbip.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
	if _, ok := cic.mutation.IsLeisure(); !ok {
		v := cmdbip.DefaultIsLeisure
		cic.mutation.SetIsLeisure(v)
	}
	if _, ok := cic.mutation.DeviceType(); !ok {
		v := cmdbip.DefaultDeviceType
		cic.mutation.SetDeviceType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CmdbIpCreate) check() error {
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CmdbIp.created_at"`)}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CmdbIp.updated_at"`)}
	}
	if _, ok := cic.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required field "CmdbIp.user"`)}
	}
	if _, ok := cic.mutation.Department(); !ok {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required field "CmdbIp.department"`)}
	}
	if _, ok := cic.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "CmdbIp.mobile"`)}
	}
	if v, ok := cic.mutation.Mobile(); ok {
		if err := cmdbip.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "CmdbIp.mobile": %w`, err)}
		}
	}
	if _, ok := cic.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "CmdbIp.remark"`)}
	}
	if _, ok := cic.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "CmdbIp.ip"`)}
	}
	if _, ok := cic.mutation.Mask(); !ok {
		return &ValidationError{Name: "mask", err: errors.New(`ent: missing required field "CmdbIp.mask"`)}
	}
	if _, ok := cic.mutation.Gateway(); !ok {
		return &ValidationError{Name: "gateway", err: errors.New(`ent: missing required field "CmdbIp.gateway"`)}
	}
	if _, ok := cic.mutation.OnlineTime(); !ok {
		return &ValidationError{Name: "online_time", err: errors.New(`ent: missing required field "CmdbIp.online_time"`)}
	}
	if _, ok := cic.mutation.OfflineTime(); !ok {
		return &ValidationError{Name: "offline_time", err: errors.New(`ent: missing required field "CmdbIp.offline_time"`)}
	}
	if _, ok := cic.mutation.IsLeisure(); !ok {
		return &ValidationError{Name: "is_leisure", err: errors.New(`ent: missing required field "CmdbIp.is_leisure"`)}
	}
	if _, ok := cic.mutation.DeviceType(); !ok {
		return &ValidationError{Name: "device_type", err: errors.New(`ent: missing required field "CmdbIp.device_type"`)}
	}
	return nil
}

func (cic *CmdbIpCreate) sqlSave(ctx context.Context) (*CmdbIp, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *CmdbIpCreate) createSpec() (*CmdbIp, *sqlgraph.CreateSpec) {
	var (
		_node = &CmdbIp{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(cmdbip.Table, sqlgraph.NewFieldSpec(cmdbip.FieldID, field.TypeUint64))
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(cmdbip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(cmdbip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.User(); ok {
		_spec.SetField(cmdbip.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := cic.mutation.Department(); ok {
		_spec.SetField(cmdbip.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := cic.mutation.Mobile(); ok {
		_spec.SetField(cmdbip.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := cic.mutation.Remark(); ok {
		_spec.SetField(cmdbip.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cic.mutation.IP(); ok {
		_spec.SetField(cmdbip.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := cic.mutation.Mask(); ok {
		_spec.SetField(cmdbip.FieldMask, field.TypeString, value)
		_node.Mask = value
	}
	if value, ok := cic.mutation.Gateway(); ok {
		_spec.SetField(cmdbip.FieldGateway, field.TypeString, value)
		_node.Gateway = value
	}
	if value, ok := cic.mutation.OnlineTime(); ok {
		_spec.SetField(cmdbip.FieldOnlineTime, field.TypeTime, value)
		_node.OnlineTime = value
	}
	if value, ok := cic.mutation.OfflineTime(); ok {
		_spec.SetField(cmdbip.FieldOfflineTime, field.TypeTime, value)
		_node.OfflineTime = value
	}
	if value, ok := cic.mutation.IsLeisure(); ok {
		_spec.SetField(cmdbip.FieldIsLeisure, field.TypeUint, value)
		_node.IsLeisure = value
	}
	if value, ok := cic.mutation.DeviceType(); ok {
		_spec.SetField(cmdbip.FieldDeviceType, field.TypeString, value)
		_node.DeviceType = value
	}
	return _node, _spec
}

// CmdbIpCreateBulk is the builder for creating many CmdbIp entities in bulk.
type CmdbIpCreateBulk struct {
	config
	err      error
	builders []*CmdbIpCreate
}

// Save creates the CmdbIp entities in the database.
func (cicb *CmdbIpCreateBulk) Save(ctx context.Context) ([]*CmdbIp, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CmdbIp, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CmdbIpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CmdbIpCreateBulk) SaveX(ctx context.Context) []*CmdbIp {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CmdbIpCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CmdbIpCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
