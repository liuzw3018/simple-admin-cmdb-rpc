// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdb"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbassets"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbip"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbipuser"
)

const errInvalidPage = "INVALID_PAGE"

const (
	listField     = "list"
	pageNumField  = "pageNum"
	pageSizeField = "pageSize"
)

type PageDetails struct {
	Page  uint64 `json:"page"`
	Size  uint64 `json:"size"`
	Total uint64 `json:"total"`
}

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

const errInvalidPagination = "INVALID_PAGINATION"

type CmdbPager struct {
	Order  cmdb.OrderOption
	Filter func(*CmdbQuery) (*CmdbQuery, error)
}

// CmdbPaginateOption enables pagination customization.
type CmdbPaginateOption func(*CmdbPager)

// DefaultCmdbOrder is the default ordering of Cmdb.
var DefaultCmdbOrder = Desc(cmdb.FieldID)

func newCmdbPager(opts []CmdbPaginateOption) (*CmdbPager, error) {
	pager := &CmdbPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultCmdbOrder
	}
	return pager, nil
}

func (p *CmdbPager) ApplyFilter(query *CmdbQuery) (*CmdbQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// CmdbPageList is Cmdb PageList result.
type CmdbPageList struct {
	List        []*Cmdb      `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (c *CmdbQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...CmdbPaginateOption,
) (*CmdbPageList, error) {

	pager, err := newCmdbPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.ApplyFilter(c); err != nil {
		return nil, err
	}

	ret := &CmdbPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := c.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		c = c.Order(pager.Order)
	} else {
		c = c.Order(DefaultCmdbOrder)
	}

	c = c.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type CmdbAssetsPager struct {
	Order  cmdbassets.OrderOption
	Filter func(*CmdbAssetsQuery) (*CmdbAssetsQuery, error)
}

// CmdbAssetsPaginateOption enables pagination customization.
type CmdbAssetsPaginateOption func(*CmdbAssetsPager)

// DefaultCmdbAssetsOrder is the default ordering of CmdbAssets.
var DefaultCmdbAssetsOrder = Desc(cmdbassets.FieldID)

func newCmdbAssetsPager(opts []CmdbAssetsPaginateOption) (*CmdbAssetsPager, error) {
	pager := &CmdbAssetsPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultCmdbAssetsOrder
	}
	return pager, nil
}

func (p *CmdbAssetsPager) ApplyFilter(query *CmdbAssetsQuery) (*CmdbAssetsQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// CmdbAssetsPageList is CmdbAssets PageList result.
type CmdbAssetsPageList struct {
	List        []*CmdbAssets `json:"list"`
	PageDetails *PageDetails  `json:"pageDetails"`
}

func (ca *CmdbAssetsQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...CmdbAssetsPaginateOption,
) (*CmdbAssetsPageList, error) {

	pager, err := newCmdbAssetsPager(opts)
	if err != nil {
		return nil, err
	}

	if ca, err = pager.ApplyFilter(ca); err != nil {
		return nil, err
	}

	ret := &CmdbAssetsPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := ca.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ca = ca.Order(pager.Order)
	} else {
		ca = ca.Order(DefaultCmdbAssetsOrder)
	}

	ca = ca.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ca.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type CmdbIpPager struct {
	Order  cmdbip.OrderOption
	Filter func(*CmdbIpQuery) (*CmdbIpQuery, error)
}

// CmdbIpPaginateOption enables pagination customization.
type CmdbIpPaginateOption func(*CmdbIpPager)

// DefaultCmdbIpOrder is the default ordering of CmdbIp.
var DefaultCmdbIpOrder = Desc(cmdbip.FieldID)

func newCmdbIpPager(opts []CmdbIpPaginateOption) (*CmdbIpPager, error) {
	pager := &CmdbIpPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultCmdbIpOrder
	}
	return pager, nil
}

func (p *CmdbIpPager) ApplyFilter(query *CmdbIpQuery) (*CmdbIpQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// CmdbIpPageList is CmdbIp PageList result.
type CmdbIpPageList struct {
	List        []*CmdbIp    `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (ci *CmdbIpQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...CmdbIpPaginateOption,
) (*CmdbIpPageList, error) {

	pager, err := newCmdbIpPager(opts)
	if err != nil {
		return nil, err
	}

	if ci, err = pager.ApplyFilter(ci); err != nil {
		return nil, err
	}

	ret := &CmdbIpPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := ci.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ci = ci.Order(pager.Order)
	} else {
		ci = ci.Order(DefaultCmdbIpOrder)
	}

	ci = ci.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ci.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type CmdbIpUserPager struct {
	Order  cmdbipuser.OrderOption
	Filter func(*CmdbIpUserQuery) (*CmdbIpUserQuery, error)
}

// CmdbIpUserPaginateOption enables pagination customization.
type CmdbIpUserPaginateOption func(*CmdbIpUserPager)

// DefaultCmdbIpUserOrder is the default ordering of CmdbIpUser.
var DefaultCmdbIpUserOrder = Desc(cmdbipuser.FieldID)

func newCmdbIpUserPager(opts []CmdbIpUserPaginateOption) (*CmdbIpUserPager, error) {
	pager := &CmdbIpUserPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultCmdbIpUserOrder
	}
	return pager, nil
}

func (p *CmdbIpUserPager) ApplyFilter(query *CmdbIpUserQuery) (*CmdbIpUserQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// CmdbIpUserPageList is CmdbIpUser PageList result.
type CmdbIpUserPageList struct {
	List        []*CmdbIpUser `json:"list"`
	PageDetails *PageDetails  `json:"pageDetails"`
}

func (ciu *CmdbIpUserQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...CmdbIpUserPaginateOption,
) (*CmdbIpUserPageList, error) {

	pager, err := newCmdbIpUserPager(opts)
	if err != nil {
		return nil, err
	}

	if ciu, err = pager.ApplyFilter(ciu); err != nil {
		return nil, err
	}

	ret := &CmdbIpUserPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	count, err := ciu.Clone().Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ciu = ciu.Order(pager.Order)
	} else {
		ciu = ciu.Order(DefaultCmdbIpUserOrder)
	}

	ciu = ciu.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ciu.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}
