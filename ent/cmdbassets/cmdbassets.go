// Code generated by ent, DO NOT EDIT.

package cmdbassets

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cmdbassets type in the database.
	Label = "cmdb_assets"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldMask holds the string denoting the mask field in the database.
	FieldMask = "mask"
	// FieldGateway holds the string denoting the gateway field in the database.
	FieldGateway = "gateway"
	// FieldOnlineTime holds the string denoting the online_time field in the database.
	FieldOnlineTime = "online_time"
	// FieldOfflineTime holds the string denoting the offline_time field in the database.
	FieldOfflineTime = "offline_time"
	// FieldPowerStatus holds the string denoting the power_status field in the database.
	FieldPowerStatus = "power_status"
	// FieldIsServer holds the string denoting the is_server field in the database.
	FieldIsServer = "is_server"
	// FieldServerType holds the string denoting the server_type field in the database.
	FieldServerType = "server_type"
	// FieldServerHostname holds the string denoting the server_hostname field in the database.
	FieldServerHostname = "server_hostname"
	// FieldServerOs holds the string denoting the server_os field in the database.
	FieldServerOs = "server_os"
	// FieldServerOsVersion holds the string denoting the server_os_version field in the database.
	FieldServerOsVersion = "server_os_version"
	// FieldServerOsArch holds the string denoting the server_os_arch field in the database.
	FieldServerOsArch = "server_os_arch"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldDisk holds the string denoting the disk field in the database.
	FieldDisk = "disk"
	// FieldNetworkSpeed holds the string denoting the networkspeed field in the database.
	FieldNetworkSpeed = "network_speed"
	// FieldDeviceAddress holds the string denoting the device_address field in the database.
	FieldDeviceAddress = "device_address"
	// Table holds the table name of the cmdbassets in the database.
	Table = "cmdb_assets"
)

// Columns holds all SQL columns for cmdbassets fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUser,
	FieldDepartment,
	FieldMobile,
	FieldRemark,
	FieldIP,
	FieldMask,
	FieldGateway,
	FieldOnlineTime,
	FieldOfflineTime,
	FieldPowerStatus,
	FieldIsServer,
	FieldServerType,
	FieldServerHostname,
	FieldServerOs,
	FieldServerOsVersion,
	FieldServerOsArch,
	FieldCPU,
	FieldMemory,
	FieldDisk,
	FieldNetworkSpeed,
	FieldDeviceAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// DefaultPowerStatus holds the default value on creation for the "power_status" field.
	DefaultPowerStatus uint
	// DefaultIsServer holds the default value on creation for the "is_server" field.
	DefaultIsServer uint
	// DefaultServerType holds the default value on creation for the "server_type" field.
	DefaultServerType uint
	// DefaultServerHostname holds the default value on creation for the "server_hostname" field.
	DefaultServerHostname string
	// DefaultServerOs holds the default value on creation for the "server_os" field.
	DefaultServerOs string
	// DefaultServerOsVersion holds the default value on creation for the "server_os_version" field.
	DefaultServerOsVersion string
	// DefaultServerOsArch holds the default value on creation for the "server_os_arch" field.
	DefaultServerOsArch string
	// DefaultNetworkSpeed holds the default value on creation for the "NetworkSpeed" field.
	DefaultNetworkSpeed string
	// DefaultDeviceAddress holds the default value on creation for the "device_address" field.
	DefaultDeviceAddress string
)

// OrderOption defines the ordering options for the CmdbAssets queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByMask orders the results by the mask field.
func ByMask(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMask, opts...).ToFunc()
}

// ByGateway orders the results by the gateway field.
func ByGateway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGateway, opts...).ToFunc()
}

// ByOnlineTime orders the results by the online_time field.
func ByOnlineTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnlineTime, opts...).ToFunc()
}

// ByOfflineTime orders the results by the offline_time field.
func ByOfflineTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfflineTime, opts...).ToFunc()
}

// ByPowerStatus orders the results by the power_status field.
func ByPowerStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerStatus, opts...).ToFunc()
}

// ByIsServer orders the results by the is_server field.
func ByIsServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsServer, opts...).ToFunc()
}

// ByServerType orders the results by the server_type field.
func ByServerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerType, opts...).ToFunc()
}

// ByServerHostname orders the results by the server_hostname field.
func ByServerHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerHostname, opts...).ToFunc()
}

// ByServerOs orders the results by the server_os field.
func ByServerOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerOs, opts...).ToFunc()
}

// ByServerOsVersion orders the results by the server_os_version field.
func ByServerOsVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerOsVersion, opts...).ToFunc()
}

// ByServerOsArch orders the results by the server_os_arch field.
func ByServerOsArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerOsArch, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByDisk orders the results by the disk field.
func ByDisk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisk, opts...).ToFunc()
}

// ByNetworkSpeed orders the results by the NetworkSpeed field.
func ByNetworkSpeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNetworkSpeed, opts...).ToFunc()
}

// ByDeviceAddress orders the results by the device_address field.
func ByDeviceAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceAddress, opts...).ToFunc()
}
