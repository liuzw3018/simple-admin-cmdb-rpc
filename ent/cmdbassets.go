// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbassets"
)

// CmdbAssets is the model entity for the CmdbAssets schema.
type CmdbAssets struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户
	User string `json:"user,omitempty"`
	// 部门
	Department string `json:"department,omitempty"`
	// 联系方式
	Mobile string `json:"mobile,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// IP
	IP string `json:"ip,omitempty"`
	// 掩码
	Mask string `json:"mask,omitempty"`
	// 网关
	Gateway string `json:"gateway,omitempty"`
	// 上线时间
	OnlineTime time.Time `json:"online_time,omitempty"`
	// 下线时间
	OfflineTime time.Time `json:"offline_time,omitempty"`
	// 电源状态 | 1: 开机 | 0: 关机
	PowerStatus uint `json:"power_status,omitempty"`
	// 是否服务器 | 1: 是 | 0: 否
	IsServer uint `json:"is_server,omitempty"`
	// 服务器类型 | 1: 物理机 | 2: 虚拟机 | 3: 容器
	ServerType uint `json:"server_type,omitempty"`
	// 服务器主机名
	ServerHostname string `json:"server_hostname,omitempty"`
	// 服务器操作系统
	ServerOs string `json:"server_os,omitempty"`
	// 服务器操作系统版本
	ServerOsVersion string `json:"server_os_version,omitempty"`
	// 服务器操作系统架构
	ServerOsArch string `json:"server_os_arch,omitempty"`
	// cpu
	CPU string `json:"cpu,omitempty"`
	// 内存
	Memory string `json:"memory,omitempty"`
	// 硬盘
	Disk string `json:"disk,omitempty"`
	// 网卡速率 | 100M | 1G | 10G | 100G
	NetworkSpeed string `json:"NetworkSpeed,omitempty"`
	// 设备位置
	DeviceAddress string `json:"device_address,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CmdbAssets) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cmdbassets.FieldID, cmdbassets.FieldPowerStatus, cmdbassets.FieldIsServer, cmdbassets.FieldServerType:
			values[i] = new(sql.NullInt64)
		case cmdbassets.FieldUser, cmdbassets.FieldDepartment, cmdbassets.FieldMobile, cmdbassets.FieldRemark, cmdbassets.FieldIP, cmdbassets.FieldMask, cmdbassets.FieldGateway, cmdbassets.FieldServerHostname, cmdbassets.FieldServerOs, cmdbassets.FieldServerOsVersion, cmdbassets.FieldServerOsArch, cmdbassets.FieldCPU, cmdbassets.FieldMemory, cmdbassets.FieldDisk, cmdbassets.FieldNetworkSpeed, cmdbassets.FieldDeviceAddress:
			values[i] = new(sql.NullString)
		case cmdbassets.FieldCreatedAt, cmdbassets.FieldUpdatedAt, cmdbassets.FieldOnlineTime, cmdbassets.FieldOfflineTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CmdbAssets fields.
func (ca *CmdbAssets) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cmdbassets.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = uint64(value.Int64)
		case cmdbassets.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case cmdbassets.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case cmdbassets.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				ca.User = value.String
			}
		case cmdbassets.FieldDepartment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department", values[i])
			} else if value.Valid {
				ca.Department = value.String
			}
		case cmdbassets.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				ca.Mobile = value.String
			}
		case cmdbassets.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ca.Remark = value.String
			}
		case cmdbassets.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ca.IP = value.String
			}
		case cmdbassets.FieldMask:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mask", values[i])
			} else if value.Valid {
				ca.Mask = value.String
			}
		case cmdbassets.FieldGateway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway", values[i])
			} else if value.Valid {
				ca.Gateway = value.String
			}
		case cmdbassets.FieldOnlineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field online_time", values[i])
			} else if value.Valid {
				ca.OnlineTime = value.Time
			}
		case cmdbassets.FieldOfflineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field offline_time", values[i])
			} else if value.Valid {
				ca.OfflineTime = value.Time
			}
		case cmdbassets.FieldPowerStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power_status", values[i])
			} else if value.Valid {
				ca.PowerStatus = uint(value.Int64)
			}
		case cmdbassets.FieldIsServer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_server", values[i])
			} else if value.Valid {
				ca.IsServer = uint(value.Int64)
			}
		case cmdbassets.FieldServerType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field server_type", values[i])
			} else if value.Valid {
				ca.ServerType = uint(value.Int64)
			}
		case cmdbassets.FieldServerHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_hostname", values[i])
			} else if value.Valid {
				ca.ServerHostname = value.String
			}
		case cmdbassets.FieldServerOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_os", values[i])
			} else if value.Valid {
				ca.ServerOs = value.String
			}
		case cmdbassets.FieldServerOsVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_os_version", values[i])
			} else if value.Valid {
				ca.ServerOsVersion = value.String
			}
		case cmdbassets.FieldServerOsArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_os_arch", values[i])
			} else if value.Valid {
				ca.ServerOsArch = value.String
			}
		case cmdbassets.FieldCPU:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				ca.CPU = value.String
			}
		case cmdbassets.FieldMemory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				ca.Memory = value.String
			}
		case cmdbassets.FieldDisk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disk", values[i])
			} else if value.Valid {
				ca.Disk = value.String
			}
		case cmdbassets.FieldNetworkSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NetworkSpeed", values[i])
			} else if value.Valid {
				ca.NetworkSpeed = value.String
			}
		case cmdbassets.FieldDeviceAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_address", values[i])
			} else if value.Valid {
				ca.DeviceAddress = value.String
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CmdbAssets.
// This includes values selected through modifiers, order, etc.
func (ca *CmdbAssets) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// Update returns a builder for updating this CmdbAssets.
// Note that you need to call CmdbAssets.Unwrap() before calling this method if this CmdbAssets
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CmdbAssets) Update() *CmdbAssetsUpdateOne {
	return NewCmdbAssetsClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CmdbAssets entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CmdbAssets) Unwrap() *CmdbAssets {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CmdbAssets is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CmdbAssets) String() string {
	var builder strings.Builder
	builder.WriteString("CmdbAssets(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(ca.User)
	builder.WriteString(", ")
	builder.WriteString("department=")
	builder.WriteString(ca.Department)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(ca.Mobile)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ca.Remark)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ca.IP)
	builder.WriteString(", ")
	builder.WriteString("mask=")
	builder.WriteString(ca.Mask)
	builder.WriteString(", ")
	builder.WriteString("gateway=")
	builder.WriteString(ca.Gateway)
	builder.WriteString(", ")
	builder.WriteString("online_time=")
	builder.WriteString(ca.OnlineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("offline_time=")
	builder.WriteString(ca.OfflineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("power_status=")
	builder.WriteString(fmt.Sprintf("%v", ca.PowerStatus))
	builder.WriteString(", ")
	builder.WriteString("is_server=")
	builder.WriteString(fmt.Sprintf("%v", ca.IsServer))
	builder.WriteString(", ")
	builder.WriteString("server_type=")
	builder.WriteString(fmt.Sprintf("%v", ca.ServerType))
	builder.WriteString(", ")
	builder.WriteString("server_hostname=")
	builder.WriteString(ca.ServerHostname)
	builder.WriteString(", ")
	builder.WriteString("server_os=")
	builder.WriteString(ca.ServerOs)
	builder.WriteString(", ")
	builder.WriteString("server_os_version=")
	builder.WriteString(ca.ServerOsVersion)
	builder.WriteString(", ")
	builder.WriteString("server_os_arch=")
	builder.WriteString(ca.ServerOsArch)
	builder.WriteString(", ")
	builder.WriteString("cpu=")
	builder.WriteString(ca.CPU)
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(ca.Memory)
	builder.WriteString(", ")
	builder.WriteString("disk=")
	builder.WriteString(ca.Disk)
	builder.WriteString(", ")
	builder.WriteString("NetworkSpeed=")
	builder.WriteString(ca.NetworkSpeed)
	builder.WriteString(", ")
	builder.WriteString("device_address=")
	builder.WriteString(ca.DeviceAddress)
	builder.WriteByte(')')
	return builder.String()
}

// CmdbAssetsSlice is a parsable slice of CmdbAssets.
type CmdbAssetsSlice []*CmdbAssets
