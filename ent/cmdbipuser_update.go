// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbipuser"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/predicate"
)

// CmdbIpUserUpdate is the builder for updating CmdbIpUser entities.
type CmdbIpUserUpdate struct {
	config
	hooks    []Hook
	mutation *CmdbIpUserMutation
}

// Where appends a list predicates to the CmdbIpUserUpdate builder.
func (ciuu *CmdbIpUserUpdate) Where(ps ...predicate.CmdbIpUser) *CmdbIpUserUpdate {
	ciuu.mutation.Where(ps...)
	return ciuu
}

// SetStatus sets the "status" field.
func (ciuu *CmdbIpUserUpdate) SetStatus(u uint8) *CmdbIpUserUpdate {
	ciuu.mutation.ResetStatus()
	ciuu.mutation.SetStatus(u)
	return ciuu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciuu *CmdbIpUserUpdate) SetNillableStatus(u *uint8) *CmdbIpUserUpdate {
	if u != nil {
		ciuu.SetStatus(*u)
	}
	return ciuu
}

// AddStatus adds u to the "status" field.
func (ciuu *CmdbIpUserUpdate) AddStatus(u int8) *CmdbIpUserUpdate {
	ciuu.mutation.AddStatus(u)
	return ciuu
}

// ClearStatus clears the value of the "status" field.
func (ciuu *CmdbIpUserUpdate) ClearStatus() *CmdbIpUserUpdate {
	ciuu.mutation.ClearStatus()
	return ciuu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuu *CmdbIpUserUpdate) SetUpdatedAt(t time.Time) *CmdbIpUserUpdate {
	ciuu.mutation.SetUpdatedAt(t)
	return ciuu
}

// SetUser sets the "user" field.
func (ciuu *CmdbIpUserUpdate) SetUser(s string) *CmdbIpUserUpdate {
	ciuu.mutation.SetUser(s)
	return ciuu
}

// SetDepartment sets the "department" field.
func (ciuu *CmdbIpUserUpdate) SetDepartment(s string) *CmdbIpUserUpdate {
	ciuu.mutation.SetDepartment(s)
	return ciuu
}

// SetMobile sets the "mobile" field.
func (ciuu *CmdbIpUserUpdate) SetMobile(s string) *CmdbIpUserUpdate {
	ciuu.mutation.SetMobile(s)
	return ciuu
}

// SetRemark sets the "remark" field.
func (ciuu *CmdbIpUserUpdate) SetRemark(s string) *CmdbIpUserUpdate {
	ciuu.mutation.SetRemark(s)
	return ciuu
}

// Mutation returns the CmdbIpUserMutation object of the builder.
func (ciuu *CmdbIpUserUpdate) Mutation() *CmdbIpUserMutation {
	return ciuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciuu *CmdbIpUserUpdate) Save(ctx context.Context) (int, error) {
	ciuu.defaults()
	return withHooks(ctx, ciuu.sqlSave, ciuu.mutation, ciuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuu *CmdbIpUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ciuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciuu *CmdbIpUserUpdate) Exec(ctx context.Context) error {
	_, err := ciuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuu *CmdbIpUserUpdate) ExecX(ctx context.Context) {
	if err := ciuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuu *CmdbIpUserUpdate) defaults() {
	if _, ok := ciuu.mutation.UpdatedAt(); !ok {
		v := cmdbipuser.UpdateDefaultUpdatedAt()
		ciuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuu *CmdbIpUserUpdate) check() error {
	if v, ok := ciuu.mutation.Mobile(); ok {
		if err := cmdbipuser.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "CmdbIpUser.mobile": %w`, err)}
		}
	}
	return nil
}

func (ciuu *CmdbIpUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cmdbipuser.Table, cmdbipuser.Columns, sqlgraph.NewFieldSpec(cmdbipuser.FieldID, field.TypeUint64))
	if ps := ciuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuu.mutation.Status(); ok {
		_spec.SetField(cmdbipuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ciuu.mutation.AddedStatus(); ok {
		_spec.AddField(cmdbipuser.FieldStatus, field.TypeUint8, value)
	}
	if ciuu.mutation.StatusCleared() {
		_spec.ClearField(cmdbipuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := ciuu.mutation.UpdatedAt(); ok {
		_spec.SetField(cmdbipuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciuu.mutation.User(); ok {
		_spec.SetField(cmdbipuser.FieldUser, field.TypeString, value)
	}
	if value, ok := ciuu.mutation.Department(); ok {
		_spec.SetField(cmdbipuser.FieldDepartment, field.TypeString, value)
	}
	if value, ok := ciuu.mutation.Mobile(); ok {
		_spec.SetField(cmdbipuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := ciuu.mutation.Remark(); ok {
		_spec.SetField(cmdbipuser.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmdbipuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciuu.mutation.done = true
	return n, nil
}

// CmdbIpUserUpdateOne is the builder for updating a single CmdbIpUser entity.
type CmdbIpUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CmdbIpUserMutation
}

// SetStatus sets the "status" field.
func (ciuuo *CmdbIpUserUpdateOne) SetStatus(u uint8) *CmdbIpUserUpdateOne {
	ciuuo.mutation.ResetStatus()
	ciuuo.mutation.SetStatus(u)
	return ciuuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciuuo *CmdbIpUserUpdateOne) SetNillableStatus(u *uint8) *CmdbIpUserUpdateOne {
	if u != nil {
		ciuuo.SetStatus(*u)
	}
	return ciuuo
}

// AddStatus adds u to the "status" field.
func (ciuuo *CmdbIpUserUpdateOne) AddStatus(u int8) *CmdbIpUserUpdateOne {
	ciuuo.mutation.AddStatus(u)
	return ciuuo
}

// ClearStatus clears the value of the "status" field.
func (ciuuo *CmdbIpUserUpdateOne) ClearStatus() *CmdbIpUserUpdateOne {
	ciuuo.mutation.ClearStatus()
	return ciuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuuo *CmdbIpUserUpdateOne) SetUpdatedAt(t time.Time) *CmdbIpUserUpdateOne {
	ciuuo.mutation.SetUpdatedAt(t)
	return ciuuo
}

// SetUser sets the "user" field.
func (ciuuo *CmdbIpUserUpdateOne) SetUser(s string) *CmdbIpUserUpdateOne {
	ciuuo.mutation.SetUser(s)
	return ciuuo
}

// SetDepartment sets the "department" field.
func (ciuuo *CmdbIpUserUpdateOne) SetDepartment(s string) *CmdbIpUserUpdateOne {
	ciuuo.mutation.SetDepartment(s)
	return ciuuo
}

// SetMobile sets the "mobile" field.
func (ciuuo *CmdbIpUserUpdateOne) SetMobile(s string) *CmdbIpUserUpdateOne {
	ciuuo.mutation.SetMobile(s)
	return ciuuo
}

// SetRemark sets the "remark" field.
func (ciuuo *CmdbIpUserUpdateOne) SetRemark(s string) *CmdbIpUserUpdateOne {
	ciuuo.mutation.SetRemark(s)
	return ciuuo
}

// Mutation returns the CmdbIpUserMutation object of the builder.
func (ciuuo *CmdbIpUserUpdateOne) Mutation() *CmdbIpUserMutation {
	return ciuuo.mutation
}

// Where appends a list predicates to the CmdbIpUserUpdate builder.
func (ciuuo *CmdbIpUserUpdateOne) Where(ps ...predicate.CmdbIpUser) *CmdbIpUserUpdateOne {
	ciuuo.mutation.Where(ps...)
	return ciuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuuo *CmdbIpUserUpdateOne) Select(field string, fields ...string) *CmdbIpUserUpdateOne {
	ciuuo.fields = append([]string{field}, fields...)
	return ciuuo
}

// Save executes the query and returns the updated CmdbIpUser entity.
func (ciuuo *CmdbIpUserUpdateOne) Save(ctx context.Context) (*CmdbIpUser, error) {
	ciuuo.defaults()
	return withHooks(ctx, ciuuo.sqlSave, ciuuo.mutation, ciuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuuo *CmdbIpUserUpdateOne) SaveX(ctx context.Context) *CmdbIpUser {
	node, err := ciuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuuo *CmdbIpUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuuo *CmdbIpUserUpdateOne) ExecX(ctx context.Context) {
	if err := ciuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuuo *CmdbIpUserUpdateOne) defaults() {
	if _, ok := ciuuo.mutation.UpdatedAt(); !ok {
		v := cmdbipuser.UpdateDefaultUpdatedAt()
		ciuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuuo *CmdbIpUserUpdateOne) check() error {
	if v, ok := ciuuo.mutation.Mobile(); ok {
		if err := cmdbipuser.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "CmdbIpUser.mobile": %w`, err)}
		}
	}
	return nil
}

func (ciuuo *CmdbIpUserUpdateOne) sqlSave(ctx context.Context) (_node *CmdbIpUser, err error) {
	if err := ciuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cmdbipuser.Table, cmdbipuser.Columns, sqlgraph.NewFieldSpec(cmdbipuser.FieldID, field.TypeUint64))
	id, ok := ciuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CmdbIpUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cmdbipuser.FieldID)
		for _, f := range fields {
			if !cmdbipuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cmdbipuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuuo.mutation.Status(); ok {
		_spec.SetField(cmdbipuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ciuuo.mutation.AddedStatus(); ok {
		_spec.AddField(cmdbipuser.FieldStatus, field.TypeUint8, value)
	}
	if ciuuo.mutation.StatusCleared() {
		_spec.ClearField(cmdbipuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := ciuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cmdbipuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ciuuo.mutation.User(); ok {
		_spec.SetField(cmdbipuser.FieldUser, field.TypeString, value)
	}
	if value, ok := ciuuo.mutation.Department(); ok {
		_spec.SetField(cmdbipuser.FieldDepartment, field.TypeString, value)
	}
	if value, ok := ciuuo.mutation.Mobile(); ok {
		_spec.SetField(cmdbipuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := ciuuo.mutation.Remark(); ok {
		_spec.SetField(cmdbipuser.FieldRemark, field.TypeString, value)
	}
	_node = &CmdbIpUser{config: ciuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cmdbipuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuuo.mutation.done = true
	return _node, nil
}
