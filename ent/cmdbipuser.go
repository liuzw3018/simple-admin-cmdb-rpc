// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbipuser"
)

// CmdbIpUser is the model entity for the CmdbIpUser schema.
type CmdbIpUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户
	User string `json:"user,omitempty"`
	// 部门
	Department string `json:"department,omitempty"`
	// 联系方式
	Mobile string `json:"mobile,omitempty"`
	// 备注
	Remark       string `json:"remark,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CmdbIpUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cmdbipuser.FieldID, cmdbipuser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case cmdbipuser.FieldUser, cmdbipuser.FieldDepartment, cmdbipuser.FieldMobile, cmdbipuser.FieldRemark:
			values[i] = new(sql.NullString)
		case cmdbipuser.FieldCreatedAt, cmdbipuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CmdbIpUser fields.
func (ciu *CmdbIpUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cmdbipuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ciu.ID = uint64(value.Int64)
		case cmdbipuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ciu.Status = uint8(value.Int64)
			}
		case cmdbipuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ciu.CreatedAt = value.Time
			}
		case cmdbipuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ciu.UpdatedAt = value.Time
			}
		case cmdbipuser.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				ciu.User = value.String
			}
		case cmdbipuser.FieldDepartment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department", values[i])
			} else if value.Valid {
				ciu.Department = value.String
			}
		case cmdbipuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				ciu.Mobile = value.String
			}
		case cmdbipuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ciu.Remark = value.String
			}
		default:
			ciu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CmdbIpUser.
// This includes values selected through modifiers, order, etc.
func (ciu *CmdbIpUser) Value(name string) (ent.Value, error) {
	return ciu.selectValues.Get(name)
}

// Update returns a builder for updating this CmdbIpUser.
// Note that you need to call CmdbIpUser.Unwrap() before calling this method if this CmdbIpUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ciu *CmdbIpUser) Update() *CmdbIpUserUpdateOne {
	return NewCmdbIpUserClient(ciu.config).UpdateOne(ciu)
}

// Unwrap unwraps the CmdbIpUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ciu *CmdbIpUser) Unwrap() *CmdbIpUser {
	_tx, ok := ciu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CmdbIpUser is not a transactional entity")
	}
	ciu.config.driver = _tx.drv
	return ciu
}

// String implements the fmt.Stringer.
func (ciu *CmdbIpUser) String() string {
	var builder strings.Builder
	builder.WriteString("CmdbIpUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ciu.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ciu.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ciu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ciu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(ciu.User)
	builder.WriteString(", ")
	builder.WriteString("department=")
	builder.WriteString(ciu.Department)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(ciu.Mobile)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ciu.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// CmdbIpUsers is a parsable slice of CmdbIpUser.
type CmdbIpUsers []*CmdbIpUser
