// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbassets"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbip"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbipuser"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCmdb       = "Cmdb"
	TypeCmdbAssets = "CmdbAssets"
	TypeCmdbIp     = "CmdbIp"
	TypeCmdbIpUser = "CmdbIpUser"
)

// CmdbMutation represents an operation that mutates the Cmdb nodes in the graph.
type CmdbMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cmdb, error)
	predicates    []predicate.Cmdb
}

var _ ent.Mutation = (*CmdbMutation)(nil)

// cmdbOption allows management of the mutation configuration using functional options.
type cmdbOption func(*CmdbMutation)

// newCmdbMutation creates new mutation for the Cmdb entity.
func newCmdbMutation(c config, op Op, opts ...cmdbOption) *CmdbMutation {
	m := &CmdbMutation{
		config:        c,
		op:            op,
		typ:           TypeCmdb,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCmdbID sets the ID field of the mutation.
func withCmdbID(id int) cmdbOption {
	return func(m *CmdbMutation) {
		var (
			err   error
			once  sync.Once
			value *Cmdb
		)
		m.oldValue = func(ctx context.Context) (*Cmdb, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cmdb.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCmdb sets the old Cmdb of the mutation.
func withCmdb(node *Cmdb) cmdbOption {
	return func(m *CmdbMutation) {
		m.oldValue = func(context.Context) (*Cmdb, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CmdbMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CmdbMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CmdbMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CmdbMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cmdb.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the CmdbMutation builder.
func (m *CmdbMutation) Where(ps ...predicate.Cmdb) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CmdbMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CmdbMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cmdb, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CmdbMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CmdbMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cmdb).
func (m *CmdbMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CmdbMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CmdbMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CmdbMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Cmdb field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Cmdb field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CmdbMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CmdbMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Cmdb numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CmdbMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CmdbMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CmdbMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cmdb nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CmdbMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Cmdb field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CmdbMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CmdbMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CmdbMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CmdbMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CmdbMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CmdbMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CmdbMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cmdb unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CmdbMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cmdb edge %s", name)
}

// CmdbAssetsMutation represents an operation that mutates the CmdbAssets nodes in the graph.
type CmdbAssetsMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	user              *string
	department        *string
	mobile            *string
	remark            *string
	ip                *string
	mask              *string
	gateway           *string
	online_time       *time.Time
	offline_time      *time.Time
	power_status      *uint
	addpower_status   *int
	is_server         *uint
	addis_server      *int
	server_type       *uint
	addserver_type    *int
	server_hostname   *string
	server_os         *string
	server_os_version *string
	server_os_arch    *string
	cpu               *string
	memory            *string
	disk              *string
	_NetworkSpeed     *string
	device_address    *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*CmdbAssets, error)
	predicates        []predicate.CmdbAssets
}

var _ ent.Mutation = (*CmdbAssetsMutation)(nil)

// cmdbassetsOption allows management of the mutation configuration using functional options.
type cmdbassetsOption func(*CmdbAssetsMutation)

// newCmdbAssetsMutation creates new mutation for the CmdbAssets entity.
func newCmdbAssetsMutation(c config, op Op, opts ...cmdbassetsOption) *CmdbAssetsMutation {
	m := &CmdbAssetsMutation{
		config:        c,
		op:            op,
		typ:           TypeCmdbAssets,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCmdbAssetsID sets the ID field of the mutation.
func withCmdbAssetsID(id uint64) cmdbassetsOption {
	return func(m *CmdbAssetsMutation) {
		var (
			err   error
			once  sync.Once
			value *CmdbAssets
		)
		m.oldValue = func(ctx context.Context) (*CmdbAssets, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CmdbAssets.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCmdbAssets sets the old CmdbAssets of the mutation.
func withCmdbAssets(node *CmdbAssets) cmdbassetsOption {
	return func(m *CmdbAssetsMutation) {
		m.oldValue = func(context.Context) (*CmdbAssets, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CmdbAssetsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CmdbAssetsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CmdbAssets entities.
func (m *CmdbAssetsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CmdbAssetsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CmdbAssetsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CmdbAssets.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CmdbAssetsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CmdbAssetsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CmdbAssetsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CmdbAssetsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CmdbAssetsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CmdbAssetsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUser sets the "user" field.
func (m *CmdbAssetsMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *CmdbAssetsMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *CmdbAssetsMutation) ResetUser() {
	m.user = nil
}

// SetDepartment sets the "department" field.
func (m *CmdbAssetsMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *CmdbAssetsMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *CmdbAssetsMutation) ResetDepartment() {
	m.department = nil
}

// SetMobile sets the "mobile" field.
func (m *CmdbAssetsMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *CmdbAssetsMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *CmdbAssetsMutation) ResetMobile() {
	m.mobile = nil
}

// SetRemark sets the "remark" field.
func (m *CmdbAssetsMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CmdbAssetsMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *CmdbAssetsMutation) ResetRemark() {
	m.remark = nil
}

// SetIP sets the "ip" field.
func (m *CmdbAssetsMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *CmdbAssetsMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *CmdbAssetsMutation) ResetIP() {
	m.ip = nil
}

// SetMask sets the "mask" field.
func (m *CmdbAssetsMutation) SetMask(s string) {
	m.mask = &s
}

// Mask returns the value of the "mask" field in the mutation.
func (m *CmdbAssetsMutation) Mask() (r string, exists bool) {
	v := m.mask
	if v == nil {
		return
	}
	return *v, true
}

// OldMask returns the old "mask" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldMask(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMask: %w", err)
	}
	return oldValue.Mask, nil
}

// ResetMask resets all changes to the "mask" field.
func (m *CmdbAssetsMutation) ResetMask() {
	m.mask = nil
}

// SetGateway sets the "gateway" field.
func (m *CmdbAssetsMutation) SetGateway(s string) {
	m.gateway = &s
}

// Gateway returns the value of the "gateway" field in the mutation.
func (m *CmdbAssetsMutation) Gateway() (r string, exists bool) {
	v := m.gateway
	if v == nil {
		return
	}
	return *v, true
}

// OldGateway returns the old "gateway" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldGateway(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGateway is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGateway requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGateway: %w", err)
	}
	return oldValue.Gateway, nil
}

// ResetGateway resets all changes to the "gateway" field.
func (m *CmdbAssetsMutation) ResetGateway() {
	m.gateway = nil
}

// SetOnlineTime sets the "online_time" field.
func (m *CmdbAssetsMutation) SetOnlineTime(t time.Time) {
	m.online_time = &t
}

// OnlineTime returns the value of the "online_time" field in the mutation.
func (m *CmdbAssetsMutation) OnlineTime() (r time.Time, exists bool) {
	v := m.online_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOnlineTime returns the old "online_time" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldOnlineTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnlineTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnlineTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnlineTime: %w", err)
	}
	return oldValue.OnlineTime, nil
}

// ResetOnlineTime resets all changes to the "online_time" field.
func (m *CmdbAssetsMutation) ResetOnlineTime() {
	m.online_time = nil
}

// SetOfflineTime sets the "offline_time" field.
func (m *CmdbAssetsMutation) SetOfflineTime(t time.Time) {
	m.offline_time = &t
}

// OfflineTime returns the value of the "offline_time" field in the mutation.
func (m *CmdbAssetsMutation) OfflineTime() (r time.Time, exists bool) {
	v := m.offline_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOfflineTime returns the old "offline_time" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldOfflineTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfflineTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfflineTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfflineTime: %w", err)
	}
	return oldValue.OfflineTime, nil
}

// ResetOfflineTime resets all changes to the "offline_time" field.
func (m *CmdbAssetsMutation) ResetOfflineTime() {
	m.offline_time = nil
}

// SetPowerStatus sets the "power_status" field.
func (m *CmdbAssetsMutation) SetPowerStatus(u uint) {
	m.power_status = &u
	m.addpower_status = nil
}

// PowerStatus returns the value of the "power_status" field in the mutation.
func (m *CmdbAssetsMutation) PowerStatus() (r uint, exists bool) {
	v := m.power_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPowerStatus returns the old "power_status" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldPowerStatus(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPowerStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPowerStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowerStatus: %w", err)
	}
	return oldValue.PowerStatus, nil
}

// AddPowerStatus adds u to the "power_status" field.
func (m *CmdbAssetsMutation) AddPowerStatus(u int) {
	if m.addpower_status != nil {
		*m.addpower_status += u
	} else {
		m.addpower_status = &u
	}
}

// AddedPowerStatus returns the value that was added to the "power_status" field in this mutation.
func (m *CmdbAssetsMutation) AddedPowerStatus() (r int, exists bool) {
	v := m.addpower_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetPowerStatus resets all changes to the "power_status" field.
func (m *CmdbAssetsMutation) ResetPowerStatus() {
	m.power_status = nil
	m.addpower_status = nil
}

// SetIsServer sets the "is_server" field.
func (m *CmdbAssetsMutation) SetIsServer(u uint) {
	m.is_server = &u
	m.addis_server = nil
}

// IsServer returns the value of the "is_server" field in the mutation.
func (m *CmdbAssetsMutation) IsServer() (r uint, exists bool) {
	v := m.is_server
	if v == nil {
		return
	}
	return *v, true
}

// OldIsServer returns the old "is_server" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldIsServer(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsServer: %w", err)
	}
	return oldValue.IsServer, nil
}

// AddIsServer adds u to the "is_server" field.
func (m *CmdbAssetsMutation) AddIsServer(u int) {
	if m.addis_server != nil {
		*m.addis_server += u
	} else {
		m.addis_server = &u
	}
}

// AddedIsServer returns the value that was added to the "is_server" field in this mutation.
func (m *CmdbAssetsMutation) AddedIsServer() (r int, exists bool) {
	v := m.addis_server
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsServer resets all changes to the "is_server" field.
func (m *CmdbAssetsMutation) ResetIsServer() {
	m.is_server = nil
	m.addis_server = nil
}

// SetServerType sets the "server_type" field.
func (m *CmdbAssetsMutation) SetServerType(u uint) {
	m.server_type = &u
	m.addserver_type = nil
}

// ServerType returns the value of the "server_type" field in the mutation.
func (m *CmdbAssetsMutation) ServerType() (r uint, exists bool) {
	v := m.server_type
	if v == nil {
		return
	}
	return *v, true
}

// OldServerType returns the old "server_type" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldServerType(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerType: %w", err)
	}
	return oldValue.ServerType, nil
}

// AddServerType adds u to the "server_type" field.
func (m *CmdbAssetsMutation) AddServerType(u int) {
	if m.addserver_type != nil {
		*m.addserver_type += u
	} else {
		m.addserver_type = &u
	}
}

// AddedServerType returns the value that was added to the "server_type" field in this mutation.
func (m *CmdbAssetsMutation) AddedServerType() (r int, exists bool) {
	v := m.addserver_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetServerType resets all changes to the "server_type" field.
func (m *CmdbAssetsMutation) ResetServerType() {
	m.server_type = nil
	m.addserver_type = nil
}

// SetServerHostname sets the "server_hostname" field.
func (m *CmdbAssetsMutation) SetServerHostname(s string) {
	m.server_hostname = &s
}

// ServerHostname returns the value of the "server_hostname" field in the mutation.
func (m *CmdbAssetsMutation) ServerHostname() (r string, exists bool) {
	v := m.server_hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldServerHostname returns the old "server_hostname" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldServerHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerHostname: %w", err)
	}
	return oldValue.ServerHostname, nil
}

// ResetServerHostname resets all changes to the "server_hostname" field.
func (m *CmdbAssetsMutation) ResetServerHostname() {
	m.server_hostname = nil
}

// SetServerOs sets the "server_os" field.
func (m *CmdbAssetsMutation) SetServerOs(s string) {
	m.server_os = &s
}

// ServerOs returns the value of the "server_os" field in the mutation.
func (m *CmdbAssetsMutation) ServerOs() (r string, exists bool) {
	v := m.server_os
	if v == nil {
		return
	}
	return *v, true
}

// OldServerOs returns the old "server_os" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldServerOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerOs: %w", err)
	}
	return oldValue.ServerOs, nil
}

// ResetServerOs resets all changes to the "server_os" field.
func (m *CmdbAssetsMutation) ResetServerOs() {
	m.server_os = nil
}

// SetServerOsVersion sets the "server_os_version" field.
func (m *CmdbAssetsMutation) SetServerOsVersion(s string) {
	m.server_os_version = &s
}

// ServerOsVersion returns the value of the "server_os_version" field in the mutation.
func (m *CmdbAssetsMutation) ServerOsVersion() (r string, exists bool) {
	v := m.server_os_version
	if v == nil {
		return
	}
	return *v, true
}

// OldServerOsVersion returns the old "server_os_version" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldServerOsVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerOsVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerOsVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerOsVersion: %w", err)
	}
	return oldValue.ServerOsVersion, nil
}

// ResetServerOsVersion resets all changes to the "server_os_version" field.
func (m *CmdbAssetsMutation) ResetServerOsVersion() {
	m.server_os_version = nil
}

// SetServerOsArch sets the "server_os_arch" field.
func (m *CmdbAssetsMutation) SetServerOsArch(s string) {
	m.server_os_arch = &s
}

// ServerOsArch returns the value of the "server_os_arch" field in the mutation.
func (m *CmdbAssetsMutation) ServerOsArch() (r string, exists bool) {
	v := m.server_os_arch
	if v == nil {
		return
	}
	return *v, true
}

// OldServerOsArch returns the old "server_os_arch" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldServerOsArch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServerOsArch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServerOsArch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServerOsArch: %w", err)
	}
	return oldValue.ServerOsArch, nil
}

// ResetServerOsArch resets all changes to the "server_os_arch" field.
func (m *CmdbAssetsMutation) ResetServerOsArch() {
	m.server_os_arch = nil
}

// SetCPU sets the "cpu" field.
func (m *CmdbAssetsMutation) SetCPU(s string) {
	m.cpu = &s
}

// CPU returns the value of the "cpu" field in the mutation.
func (m *CmdbAssetsMutation) CPU() (r string, exists bool) {
	v := m.cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldCPU returns the old "cpu" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldCPU(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPU: %w", err)
	}
	return oldValue.CPU, nil
}

// ResetCPU resets all changes to the "cpu" field.
func (m *CmdbAssetsMutation) ResetCPU() {
	m.cpu = nil
}

// SetMemory sets the "memory" field.
func (m *CmdbAssetsMutation) SetMemory(s string) {
	m.memory = &s
}

// Memory returns the value of the "memory" field in the mutation.
func (m *CmdbAssetsMutation) Memory() (r string, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldMemory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// ResetMemory resets all changes to the "memory" field.
func (m *CmdbAssetsMutation) ResetMemory() {
	m.memory = nil
}

// SetDisk sets the "disk" field.
func (m *CmdbAssetsMutation) SetDisk(s string) {
	m.disk = &s
}

// Disk returns the value of the "disk" field in the mutation.
func (m *CmdbAssetsMutation) Disk() (r string, exists bool) {
	v := m.disk
	if v == nil {
		return
	}
	return *v, true
}

// OldDisk returns the old "disk" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldDisk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisk: %w", err)
	}
	return oldValue.Disk, nil
}

// ResetDisk resets all changes to the "disk" field.
func (m *CmdbAssetsMutation) ResetDisk() {
	m.disk = nil
}

// SetNetworkSpeed sets the "NetworkSpeed" field.
func (m *CmdbAssetsMutation) SetNetworkSpeed(s string) {
	m._NetworkSpeed = &s
}

// NetworkSpeed returns the value of the "NetworkSpeed" field in the mutation.
func (m *CmdbAssetsMutation) NetworkSpeed() (r string, exists bool) {
	v := m._NetworkSpeed
	if v == nil {
		return
	}
	return *v, true
}

// OldNetworkSpeed returns the old "NetworkSpeed" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldNetworkSpeed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetworkSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetworkSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetworkSpeed: %w", err)
	}
	return oldValue.NetworkSpeed, nil
}

// ResetNetworkSpeed resets all changes to the "NetworkSpeed" field.
func (m *CmdbAssetsMutation) ResetNetworkSpeed() {
	m._NetworkSpeed = nil
}

// SetDeviceAddress sets the "device_address" field.
func (m *CmdbAssetsMutation) SetDeviceAddress(s string) {
	m.device_address = &s
}

// DeviceAddress returns the value of the "device_address" field in the mutation.
func (m *CmdbAssetsMutation) DeviceAddress() (r string, exists bool) {
	v := m.device_address
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceAddress returns the old "device_address" field's value of the CmdbAssets entity.
// If the CmdbAssets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbAssetsMutation) OldDeviceAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceAddress: %w", err)
	}
	return oldValue.DeviceAddress, nil
}

// ResetDeviceAddress resets all changes to the "device_address" field.
func (m *CmdbAssetsMutation) ResetDeviceAddress() {
	m.device_address = nil
}

// Where appends a list predicates to the CmdbAssetsMutation builder.
func (m *CmdbAssetsMutation) Where(ps ...predicate.CmdbAssets) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CmdbAssetsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CmdbAssetsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CmdbAssets, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CmdbAssetsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CmdbAssetsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CmdbAssets).
func (m *CmdbAssetsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CmdbAssetsMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.created_at != nil {
		fields = append(fields, cmdbassets.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cmdbassets.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, cmdbassets.FieldUser)
	}
	if m.department != nil {
		fields = append(fields, cmdbassets.FieldDepartment)
	}
	if m.mobile != nil {
		fields = append(fields, cmdbassets.FieldMobile)
	}
	if m.remark != nil {
		fields = append(fields, cmdbassets.FieldRemark)
	}
	if m.ip != nil {
		fields = append(fields, cmdbassets.FieldIP)
	}
	if m.mask != nil {
		fields = append(fields, cmdbassets.FieldMask)
	}
	if m.gateway != nil {
		fields = append(fields, cmdbassets.FieldGateway)
	}
	if m.online_time != nil {
		fields = append(fields, cmdbassets.FieldOnlineTime)
	}
	if m.offline_time != nil {
		fields = append(fields, cmdbassets.FieldOfflineTime)
	}
	if m.power_status != nil {
		fields = append(fields, cmdbassets.FieldPowerStatus)
	}
	if m.is_server != nil {
		fields = append(fields, cmdbassets.FieldIsServer)
	}
	if m.server_type != nil {
		fields = append(fields, cmdbassets.FieldServerType)
	}
	if m.server_hostname != nil {
		fields = append(fields, cmdbassets.FieldServerHostname)
	}
	if m.server_os != nil {
		fields = append(fields, cmdbassets.FieldServerOs)
	}
	if m.server_os_version != nil {
		fields = append(fields, cmdbassets.FieldServerOsVersion)
	}
	if m.server_os_arch != nil {
		fields = append(fields, cmdbassets.FieldServerOsArch)
	}
	if m.cpu != nil {
		fields = append(fields, cmdbassets.FieldCPU)
	}
	if m.memory != nil {
		fields = append(fields, cmdbassets.FieldMemory)
	}
	if m.disk != nil {
		fields = append(fields, cmdbassets.FieldDisk)
	}
	if m._NetworkSpeed != nil {
		fields = append(fields, cmdbassets.FieldNetworkSpeed)
	}
	if m.device_address != nil {
		fields = append(fields, cmdbassets.FieldDeviceAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CmdbAssetsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cmdbassets.FieldCreatedAt:
		return m.CreatedAt()
	case cmdbassets.FieldUpdatedAt:
		return m.UpdatedAt()
	case cmdbassets.FieldUser:
		return m.User()
	case cmdbassets.FieldDepartment:
		return m.Department()
	case cmdbassets.FieldMobile:
		return m.Mobile()
	case cmdbassets.FieldRemark:
		return m.Remark()
	case cmdbassets.FieldIP:
		return m.IP()
	case cmdbassets.FieldMask:
		return m.Mask()
	case cmdbassets.FieldGateway:
		return m.Gateway()
	case cmdbassets.FieldOnlineTime:
		return m.OnlineTime()
	case cmdbassets.FieldOfflineTime:
		return m.OfflineTime()
	case cmdbassets.FieldPowerStatus:
		return m.PowerStatus()
	case cmdbassets.FieldIsServer:
		return m.IsServer()
	case cmdbassets.FieldServerType:
		return m.ServerType()
	case cmdbassets.FieldServerHostname:
		return m.ServerHostname()
	case cmdbassets.FieldServerOs:
		return m.ServerOs()
	case cmdbassets.FieldServerOsVersion:
		return m.ServerOsVersion()
	case cmdbassets.FieldServerOsArch:
		return m.ServerOsArch()
	case cmdbassets.FieldCPU:
		return m.CPU()
	case cmdbassets.FieldMemory:
		return m.Memory()
	case cmdbassets.FieldDisk:
		return m.Disk()
	case cmdbassets.FieldNetworkSpeed:
		return m.NetworkSpeed()
	case cmdbassets.FieldDeviceAddress:
		return m.DeviceAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CmdbAssetsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cmdbassets.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cmdbassets.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cmdbassets.FieldUser:
		return m.OldUser(ctx)
	case cmdbassets.FieldDepartment:
		return m.OldDepartment(ctx)
	case cmdbassets.FieldMobile:
		return m.OldMobile(ctx)
	case cmdbassets.FieldRemark:
		return m.OldRemark(ctx)
	case cmdbassets.FieldIP:
		return m.OldIP(ctx)
	case cmdbassets.FieldMask:
		return m.OldMask(ctx)
	case cmdbassets.FieldGateway:
		return m.OldGateway(ctx)
	case cmdbassets.FieldOnlineTime:
		return m.OldOnlineTime(ctx)
	case cmdbassets.FieldOfflineTime:
		return m.OldOfflineTime(ctx)
	case cmdbassets.FieldPowerStatus:
		return m.OldPowerStatus(ctx)
	case cmdbassets.FieldIsServer:
		return m.OldIsServer(ctx)
	case cmdbassets.FieldServerType:
		return m.OldServerType(ctx)
	case cmdbassets.FieldServerHostname:
		return m.OldServerHostname(ctx)
	case cmdbassets.FieldServerOs:
		return m.OldServerOs(ctx)
	case cmdbassets.FieldServerOsVersion:
		return m.OldServerOsVersion(ctx)
	case cmdbassets.FieldServerOsArch:
		return m.OldServerOsArch(ctx)
	case cmdbassets.FieldCPU:
		return m.OldCPU(ctx)
	case cmdbassets.FieldMemory:
		return m.OldMemory(ctx)
	case cmdbassets.FieldDisk:
		return m.OldDisk(ctx)
	case cmdbassets.FieldNetworkSpeed:
		return m.OldNetworkSpeed(ctx)
	case cmdbassets.FieldDeviceAddress:
		return m.OldDeviceAddress(ctx)
	}
	return nil, fmt.Errorf("unknown CmdbAssets field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbAssetsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cmdbassets.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cmdbassets.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cmdbassets.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case cmdbassets.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case cmdbassets.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case cmdbassets.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case cmdbassets.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case cmdbassets.FieldMask:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMask(v)
		return nil
	case cmdbassets.FieldGateway:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGateway(v)
		return nil
	case cmdbassets.FieldOnlineTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnlineTime(v)
		return nil
	case cmdbassets.FieldOfflineTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfflineTime(v)
		return nil
	case cmdbassets.FieldPowerStatus:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowerStatus(v)
		return nil
	case cmdbassets.FieldIsServer:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsServer(v)
		return nil
	case cmdbassets.FieldServerType:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerType(v)
		return nil
	case cmdbassets.FieldServerHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerHostname(v)
		return nil
	case cmdbassets.FieldServerOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerOs(v)
		return nil
	case cmdbassets.FieldServerOsVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerOsVersion(v)
		return nil
	case cmdbassets.FieldServerOsArch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServerOsArch(v)
		return nil
	case cmdbassets.FieldCPU:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPU(v)
		return nil
	case cmdbassets.FieldMemory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case cmdbassets.FieldDisk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisk(v)
		return nil
	case cmdbassets.FieldNetworkSpeed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetworkSpeed(v)
		return nil
	case cmdbassets.FieldDeviceAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceAddress(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbAssets field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CmdbAssetsMutation) AddedFields() []string {
	var fields []string
	if m.addpower_status != nil {
		fields = append(fields, cmdbassets.FieldPowerStatus)
	}
	if m.addis_server != nil {
		fields = append(fields, cmdbassets.FieldIsServer)
	}
	if m.addserver_type != nil {
		fields = append(fields, cmdbassets.FieldServerType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CmdbAssetsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cmdbassets.FieldPowerStatus:
		return m.AddedPowerStatus()
	case cmdbassets.FieldIsServer:
		return m.AddedIsServer()
	case cmdbassets.FieldServerType:
		return m.AddedServerType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbAssetsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cmdbassets.FieldPowerStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPowerStatus(v)
		return nil
	case cmdbassets.FieldIsServer:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsServer(v)
		return nil
	case cmdbassets.FieldServerType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddServerType(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbAssets numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CmdbAssetsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CmdbAssetsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CmdbAssetsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CmdbAssets nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CmdbAssetsMutation) ResetField(name string) error {
	switch name {
	case cmdbassets.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cmdbassets.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cmdbassets.FieldUser:
		m.ResetUser()
		return nil
	case cmdbassets.FieldDepartment:
		m.ResetDepartment()
		return nil
	case cmdbassets.FieldMobile:
		m.ResetMobile()
		return nil
	case cmdbassets.FieldRemark:
		m.ResetRemark()
		return nil
	case cmdbassets.FieldIP:
		m.ResetIP()
		return nil
	case cmdbassets.FieldMask:
		m.ResetMask()
		return nil
	case cmdbassets.FieldGateway:
		m.ResetGateway()
		return nil
	case cmdbassets.FieldOnlineTime:
		m.ResetOnlineTime()
		return nil
	case cmdbassets.FieldOfflineTime:
		m.ResetOfflineTime()
		return nil
	case cmdbassets.FieldPowerStatus:
		m.ResetPowerStatus()
		return nil
	case cmdbassets.FieldIsServer:
		m.ResetIsServer()
		return nil
	case cmdbassets.FieldServerType:
		m.ResetServerType()
		return nil
	case cmdbassets.FieldServerHostname:
		m.ResetServerHostname()
		return nil
	case cmdbassets.FieldServerOs:
		m.ResetServerOs()
		return nil
	case cmdbassets.FieldServerOsVersion:
		m.ResetServerOsVersion()
		return nil
	case cmdbassets.FieldServerOsArch:
		m.ResetServerOsArch()
		return nil
	case cmdbassets.FieldCPU:
		m.ResetCPU()
		return nil
	case cmdbassets.FieldMemory:
		m.ResetMemory()
		return nil
	case cmdbassets.FieldDisk:
		m.ResetDisk()
		return nil
	case cmdbassets.FieldNetworkSpeed:
		m.ResetNetworkSpeed()
		return nil
	case cmdbassets.FieldDeviceAddress:
		m.ResetDeviceAddress()
		return nil
	}
	return fmt.Errorf("unknown CmdbAssets field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CmdbAssetsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CmdbAssetsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CmdbAssetsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CmdbAssetsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CmdbAssetsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CmdbAssetsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CmdbAssetsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CmdbAssets unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CmdbAssetsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CmdbAssets edge %s", name)
}

// CmdbIpMutation represents an operation that mutates the CmdbIp nodes in the graph.
type CmdbIpMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	user          *string
	department    *string
	mobile        *string
	remark        *string
	ip            *string
	mask          *string
	gateway       *string
	online_time   *time.Time
	offline_time  *time.Time
	is_leisure    *uint
	addis_leisure *int
	device_type   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CmdbIp, error)
	predicates    []predicate.CmdbIp
}

var _ ent.Mutation = (*CmdbIpMutation)(nil)

// cmdbipOption allows management of the mutation configuration using functional options.
type cmdbipOption func(*CmdbIpMutation)

// newCmdbIpMutation creates new mutation for the CmdbIp entity.
func newCmdbIpMutation(c config, op Op, opts ...cmdbipOption) *CmdbIpMutation {
	m := &CmdbIpMutation{
		config:        c,
		op:            op,
		typ:           TypeCmdbIp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCmdbIpID sets the ID field of the mutation.
func withCmdbIpID(id uint64) cmdbipOption {
	return func(m *CmdbIpMutation) {
		var (
			err   error
			once  sync.Once
			value *CmdbIp
		)
		m.oldValue = func(ctx context.Context) (*CmdbIp, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CmdbIp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCmdbIp sets the old CmdbIp of the mutation.
func withCmdbIp(node *CmdbIp) cmdbipOption {
	return func(m *CmdbIpMutation) {
		m.oldValue = func(context.Context) (*CmdbIp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CmdbIpMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CmdbIpMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CmdbIp entities.
func (m *CmdbIpMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CmdbIpMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CmdbIpMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CmdbIp.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CmdbIpMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CmdbIpMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CmdbIpMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CmdbIpMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CmdbIpMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CmdbIpMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUser sets the "user" field.
func (m *CmdbIpMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *CmdbIpMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *CmdbIpMutation) ResetUser() {
	m.user = nil
}

// SetDepartment sets the "department" field.
func (m *CmdbIpMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *CmdbIpMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *CmdbIpMutation) ResetDepartment() {
	m.department = nil
}

// SetMobile sets the "mobile" field.
func (m *CmdbIpMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *CmdbIpMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *CmdbIpMutation) ResetMobile() {
	m.mobile = nil
}

// SetRemark sets the "remark" field.
func (m *CmdbIpMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CmdbIpMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *CmdbIpMutation) ResetRemark() {
	m.remark = nil
}

// SetIP sets the "ip" field.
func (m *CmdbIpMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *CmdbIpMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *CmdbIpMutation) ResetIP() {
	m.ip = nil
}

// SetMask sets the "mask" field.
func (m *CmdbIpMutation) SetMask(s string) {
	m.mask = &s
}

// Mask returns the value of the "mask" field in the mutation.
func (m *CmdbIpMutation) Mask() (r string, exists bool) {
	v := m.mask
	if v == nil {
		return
	}
	return *v, true
}

// OldMask returns the old "mask" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldMask(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMask: %w", err)
	}
	return oldValue.Mask, nil
}

// ResetMask resets all changes to the "mask" field.
func (m *CmdbIpMutation) ResetMask() {
	m.mask = nil
}

// SetGateway sets the "gateway" field.
func (m *CmdbIpMutation) SetGateway(s string) {
	m.gateway = &s
}

// Gateway returns the value of the "gateway" field in the mutation.
func (m *CmdbIpMutation) Gateway() (r string, exists bool) {
	v := m.gateway
	if v == nil {
		return
	}
	return *v, true
}

// OldGateway returns the old "gateway" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldGateway(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGateway is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGateway requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGateway: %w", err)
	}
	return oldValue.Gateway, nil
}

// ResetGateway resets all changes to the "gateway" field.
func (m *CmdbIpMutation) ResetGateway() {
	m.gateway = nil
}

// SetOnlineTime sets the "online_time" field.
func (m *CmdbIpMutation) SetOnlineTime(t time.Time) {
	m.online_time = &t
}

// OnlineTime returns the value of the "online_time" field in the mutation.
func (m *CmdbIpMutation) OnlineTime() (r time.Time, exists bool) {
	v := m.online_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOnlineTime returns the old "online_time" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldOnlineTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnlineTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnlineTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnlineTime: %w", err)
	}
	return oldValue.OnlineTime, nil
}

// ResetOnlineTime resets all changes to the "online_time" field.
func (m *CmdbIpMutation) ResetOnlineTime() {
	m.online_time = nil
}

// SetOfflineTime sets the "offline_time" field.
func (m *CmdbIpMutation) SetOfflineTime(t time.Time) {
	m.offline_time = &t
}

// OfflineTime returns the value of the "offline_time" field in the mutation.
func (m *CmdbIpMutation) OfflineTime() (r time.Time, exists bool) {
	v := m.offline_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOfflineTime returns the old "offline_time" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldOfflineTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfflineTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfflineTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfflineTime: %w", err)
	}
	return oldValue.OfflineTime, nil
}

// ResetOfflineTime resets all changes to the "offline_time" field.
func (m *CmdbIpMutation) ResetOfflineTime() {
	m.offline_time = nil
}

// SetIsLeisure sets the "is_leisure" field.
func (m *CmdbIpMutation) SetIsLeisure(u uint) {
	m.is_leisure = &u
	m.addis_leisure = nil
}

// IsLeisure returns the value of the "is_leisure" field in the mutation.
func (m *CmdbIpMutation) IsLeisure() (r uint, exists bool) {
	v := m.is_leisure
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeisure returns the old "is_leisure" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldIsLeisure(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeisure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeisure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeisure: %w", err)
	}
	return oldValue.IsLeisure, nil
}

// AddIsLeisure adds u to the "is_leisure" field.
func (m *CmdbIpMutation) AddIsLeisure(u int) {
	if m.addis_leisure != nil {
		*m.addis_leisure += u
	} else {
		m.addis_leisure = &u
	}
}

// AddedIsLeisure returns the value that was added to the "is_leisure" field in this mutation.
func (m *CmdbIpMutation) AddedIsLeisure() (r int, exists bool) {
	v := m.addis_leisure
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsLeisure resets all changes to the "is_leisure" field.
func (m *CmdbIpMutation) ResetIsLeisure() {
	m.is_leisure = nil
	m.addis_leisure = nil
}

// SetDeviceType sets the "device_type" field.
func (m *CmdbIpMutation) SetDeviceType(s string) {
	m.device_type = &s
}

// DeviceType returns the value of the "device_type" field in the mutation.
func (m *CmdbIpMutation) DeviceType() (r string, exists bool) {
	v := m.device_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceType returns the old "device_type" field's value of the CmdbIp entity.
// If the CmdbIp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpMutation) OldDeviceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceType: %w", err)
	}
	return oldValue.DeviceType, nil
}

// ResetDeviceType resets all changes to the "device_type" field.
func (m *CmdbIpMutation) ResetDeviceType() {
	m.device_type = nil
}

// Where appends a list predicates to the CmdbIpMutation builder.
func (m *CmdbIpMutation) Where(ps ...predicate.CmdbIp) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CmdbIpMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CmdbIpMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CmdbIp, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CmdbIpMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CmdbIpMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CmdbIp).
func (m *CmdbIpMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CmdbIpMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, cmdbip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cmdbip.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, cmdbip.FieldUser)
	}
	if m.department != nil {
		fields = append(fields, cmdbip.FieldDepartment)
	}
	if m.mobile != nil {
		fields = append(fields, cmdbip.FieldMobile)
	}
	if m.remark != nil {
		fields = append(fields, cmdbip.FieldRemark)
	}
	if m.ip != nil {
		fields = append(fields, cmdbip.FieldIP)
	}
	if m.mask != nil {
		fields = append(fields, cmdbip.FieldMask)
	}
	if m.gateway != nil {
		fields = append(fields, cmdbip.FieldGateway)
	}
	if m.online_time != nil {
		fields = append(fields, cmdbip.FieldOnlineTime)
	}
	if m.offline_time != nil {
		fields = append(fields, cmdbip.FieldOfflineTime)
	}
	if m.is_leisure != nil {
		fields = append(fields, cmdbip.FieldIsLeisure)
	}
	if m.device_type != nil {
		fields = append(fields, cmdbip.FieldDeviceType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CmdbIpMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cmdbip.FieldCreatedAt:
		return m.CreatedAt()
	case cmdbip.FieldUpdatedAt:
		return m.UpdatedAt()
	case cmdbip.FieldUser:
		return m.User()
	case cmdbip.FieldDepartment:
		return m.Department()
	case cmdbip.FieldMobile:
		return m.Mobile()
	case cmdbip.FieldRemark:
		return m.Remark()
	case cmdbip.FieldIP:
		return m.IP()
	case cmdbip.FieldMask:
		return m.Mask()
	case cmdbip.FieldGateway:
		return m.Gateway()
	case cmdbip.FieldOnlineTime:
		return m.OnlineTime()
	case cmdbip.FieldOfflineTime:
		return m.OfflineTime()
	case cmdbip.FieldIsLeisure:
		return m.IsLeisure()
	case cmdbip.FieldDeviceType:
		return m.DeviceType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CmdbIpMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cmdbip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cmdbip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cmdbip.FieldUser:
		return m.OldUser(ctx)
	case cmdbip.FieldDepartment:
		return m.OldDepartment(ctx)
	case cmdbip.FieldMobile:
		return m.OldMobile(ctx)
	case cmdbip.FieldRemark:
		return m.OldRemark(ctx)
	case cmdbip.FieldIP:
		return m.OldIP(ctx)
	case cmdbip.FieldMask:
		return m.OldMask(ctx)
	case cmdbip.FieldGateway:
		return m.OldGateway(ctx)
	case cmdbip.FieldOnlineTime:
		return m.OldOnlineTime(ctx)
	case cmdbip.FieldOfflineTime:
		return m.OldOfflineTime(ctx)
	case cmdbip.FieldIsLeisure:
		return m.OldIsLeisure(ctx)
	case cmdbip.FieldDeviceType:
		return m.OldDeviceType(ctx)
	}
	return nil, fmt.Errorf("unknown CmdbIp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbIpMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cmdbip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cmdbip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cmdbip.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case cmdbip.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case cmdbip.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case cmdbip.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case cmdbip.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case cmdbip.FieldMask:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMask(v)
		return nil
	case cmdbip.FieldGateway:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGateway(v)
		return nil
	case cmdbip.FieldOnlineTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnlineTime(v)
		return nil
	case cmdbip.FieldOfflineTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfflineTime(v)
		return nil
	case cmdbip.FieldIsLeisure:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeisure(v)
		return nil
	case cmdbip.FieldDeviceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceType(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbIp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CmdbIpMutation) AddedFields() []string {
	var fields []string
	if m.addis_leisure != nil {
		fields = append(fields, cmdbip.FieldIsLeisure)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CmdbIpMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cmdbip.FieldIsLeisure:
		return m.AddedIsLeisure()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbIpMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cmdbip.FieldIsLeisure:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsLeisure(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbIp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CmdbIpMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CmdbIpMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CmdbIpMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CmdbIp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CmdbIpMutation) ResetField(name string) error {
	switch name {
	case cmdbip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cmdbip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cmdbip.FieldUser:
		m.ResetUser()
		return nil
	case cmdbip.FieldDepartment:
		m.ResetDepartment()
		return nil
	case cmdbip.FieldMobile:
		m.ResetMobile()
		return nil
	case cmdbip.FieldRemark:
		m.ResetRemark()
		return nil
	case cmdbip.FieldIP:
		m.ResetIP()
		return nil
	case cmdbip.FieldMask:
		m.ResetMask()
		return nil
	case cmdbip.FieldGateway:
		m.ResetGateway()
		return nil
	case cmdbip.FieldOnlineTime:
		m.ResetOnlineTime()
		return nil
	case cmdbip.FieldOfflineTime:
		m.ResetOfflineTime()
		return nil
	case cmdbip.FieldIsLeisure:
		m.ResetIsLeisure()
		return nil
	case cmdbip.FieldDeviceType:
		m.ResetDeviceType()
		return nil
	}
	return fmt.Errorf("unknown CmdbIp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CmdbIpMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CmdbIpMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CmdbIpMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CmdbIpMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CmdbIpMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CmdbIpMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CmdbIpMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CmdbIp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CmdbIpMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CmdbIp edge %s", name)
}

// CmdbIpUserMutation represents an operation that mutates the CmdbIpUser nodes in the graph.
type CmdbIpUserMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	status        *uint8
	addstatus     *int8
	created_at    *time.Time
	updated_at    *time.Time
	user          *string
	department    *string
	mobile        *string
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CmdbIpUser, error)
	predicates    []predicate.CmdbIpUser
}

var _ ent.Mutation = (*CmdbIpUserMutation)(nil)

// cmdbipuserOption allows management of the mutation configuration using functional options.
type cmdbipuserOption func(*CmdbIpUserMutation)

// newCmdbIpUserMutation creates new mutation for the CmdbIpUser entity.
func newCmdbIpUserMutation(c config, op Op, opts ...cmdbipuserOption) *CmdbIpUserMutation {
	m := &CmdbIpUserMutation{
		config:        c,
		op:            op,
		typ:           TypeCmdbIpUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCmdbIpUserID sets the ID field of the mutation.
func withCmdbIpUserID(id uint64) cmdbipuserOption {
	return func(m *CmdbIpUserMutation) {
		var (
			err   error
			once  sync.Once
			value *CmdbIpUser
		)
		m.oldValue = func(ctx context.Context) (*CmdbIpUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CmdbIpUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCmdbIpUser sets the old CmdbIpUser of the mutation.
func withCmdbIpUser(node *CmdbIpUser) cmdbipuserOption {
	return func(m *CmdbIpUserMutation) {
		m.oldValue = func(context.Context) (*CmdbIpUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CmdbIpUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CmdbIpUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CmdbIpUser entities.
func (m *CmdbIpUserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CmdbIpUserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CmdbIpUserMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CmdbIpUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *CmdbIpUserMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CmdbIpUserMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *CmdbIpUserMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CmdbIpUserMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *CmdbIpUserMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[cmdbipuser.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *CmdbIpUserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[cmdbipuser.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *CmdbIpUserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, cmdbipuser.FieldStatus)
}

// SetCreatedAt sets the "created_at" field.
func (m *CmdbIpUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CmdbIpUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CmdbIpUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CmdbIpUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CmdbIpUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CmdbIpUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUser sets the "user" field.
func (m *CmdbIpUserMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *CmdbIpUserMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *CmdbIpUserMutation) ResetUser() {
	m.user = nil
}

// SetDepartment sets the "department" field.
func (m *CmdbIpUserMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *CmdbIpUserMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *CmdbIpUserMutation) ResetDepartment() {
	m.department = nil
}

// SetMobile sets the "mobile" field.
func (m *CmdbIpUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *CmdbIpUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *CmdbIpUserMutation) ResetMobile() {
	m.mobile = nil
}

// SetRemark sets the "remark" field.
func (m *CmdbIpUserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CmdbIpUserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CmdbIpUser entity.
// If the CmdbIpUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CmdbIpUserMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *CmdbIpUserMutation) ResetRemark() {
	m.remark = nil
}

// Where appends a list predicates to the CmdbIpUserMutation builder.
func (m *CmdbIpUserMutation) Where(ps ...predicate.CmdbIpUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CmdbIpUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CmdbIpUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CmdbIpUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CmdbIpUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CmdbIpUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CmdbIpUser).
func (m *CmdbIpUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CmdbIpUserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.status != nil {
		fields = append(fields, cmdbipuser.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, cmdbipuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cmdbipuser.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, cmdbipuser.FieldUser)
	}
	if m.department != nil {
		fields = append(fields, cmdbipuser.FieldDepartment)
	}
	if m.mobile != nil {
		fields = append(fields, cmdbipuser.FieldMobile)
	}
	if m.remark != nil {
		fields = append(fields, cmdbipuser.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CmdbIpUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cmdbipuser.FieldStatus:
		return m.Status()
	case cmdbipuser.FieldCreatedAt:
		return m.CreatedAt()
	case cmdbipuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case cmdbipuser.FieldUser:
		return m.User()
	case cmdbipuser.FieldDepartment:
		return m.Department()
	case cmdbipuser.FieldMobile:
		return m.Mobile()
	case cmdbipuser.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CmdbIpUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cmdbipuser.FieldStatus:
		return m.OldStatus(ctx)
	case cmdbipuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cmdbipuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cmdbipuser.FieldUser:
		return m.OldUser(ctx)
	case cmdbipuser.FieldDepartment:
		return m.OldDepartment(ctx)
	case cmdbipuser.FieldMobile:
		return m.OldMobile(ctx)
	case cmdbipuser.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown CmdbIpUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbIpUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cmdbipuser.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case cmdbipuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cmdbipuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cmdbipuser.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case cmdbipuser.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case cmdbipuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case cmdbipuser.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbIpUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CmdbIpUserMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, cmdbipuser.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CmdbIpUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cmdbipuser.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CmdbIpUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cmdbipuser.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown CmdbIpUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CmdbIpUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cmdbipuser.FieldStatus) {
		fields = append(fields, cmdbipuser.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CmdbIpUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CmdbIpUserMutation) ClearField(name string) error {
	switch name {
	case cmdbipuser.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown CmdbIpUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CmdbIpUserMutation) ResetField(name string) error {
	switch name {
	case cmdbipuser.FieldStatus:
		m.ResetStatus()
		return nil
	case cmdbipuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cmdbipuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cmdbipuser.FieldUser:
		m.ResetUser()
		return nil
	case cmdbipuser.FieldDepartment:
		m.ResetDepartment()
		return nil
	case cmdbipuser.FieldMobile:
		m.ResetMobile()
		return nil
	case cmdbipuser.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown CmdbIpUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CmdbIpUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CmdbIpUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CmdbIpUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CmdbIpUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CmdbIpUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CmdbIpUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CmdbIpUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CmdbIpUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CmdbIpUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CmdbIpUser edge %s", name)
}
