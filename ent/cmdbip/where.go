// Code generated by ent, DO NOT EDIT.

package cmdbip

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldUpdatedAt, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldUser, v))
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldDepartment, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldMobile, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldRemark, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldIP, v))
}

// Mask applies equality check predicate on the "mask" field. It's identical to MaskEQ.
func Mask(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldMask, v))
}

// Gateway applies equality check predicate on the "gateway" field. It's identical to GatewayEQ.
func Gateway(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldGateway, v))
}

// OnlineTime applies equality check predicate on the "online_time" field. It's identical to OnlineTimeEQ.
func OnlineTime(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldOnlineTime, v))
}

// OfflineTime applies equality check predicate on the "offline_time" field. It's identical to OfflineTimeEQ.
func OfflineTime(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldOfflineTime, v))
}

// IsLeisure applies equality check predicate on the "is_leisure" field. It's identical to IsLeisureEQ.
func IsLeisure(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldIsLeisure, v))
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldDeviceType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldUser, v))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldUser, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldDepartment, vs...))
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldDepartment, v))
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldDepartment, v))
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldDepartment, v))
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldDepartment, v))
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldDepartment, v))
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldDepartment, v))
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldDepartment, v))
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldDepartment, v))
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldDepartment, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldMobile, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldRemark, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldIP, v))
}

// MaskEQ applies the EQ predicate on the "mask" field.
func MaskEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldMask, v))
}

// MaskNEQ applies the NEQ predicate on the "mask" field.
func MaskNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldMask, v))
}

// MaskIn applies the In predicate on the "mask" field.
func MaskIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldMask, vs...))
}

// MaskNotIn applies the NotIn predicate on the "mask" field.
func MaskNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldMask, vs...))
}

// MaskGT applies the GT predicate on the "mask" field.
func MaskGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldMask, v))
}

// MaskGTE applies the GTE predicate on the "mask" field.
func MaskGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldMask, v))
}

// MaskLT applies the LT predicate on the "mask" field.
func MaskLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldMask, v))
}

// MaskLTE applies the LTE predicate on the "mask" field.
func MaskLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldMask, v))
}

// MaskContains applies the Contains predicate on the "mask" field.
func MaskContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldMask, v))
}

// MaskHasPrefix applies the HasPrefix predicate on the "mask" field.
func MaskHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldMask, v))
}

// MaskHasSuffix applies the HasSuffix predicate on the "mask" field.
func MaskHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldMask, v))
}

// MaskEqualFold applies the EqualFold predicate on the "mask" field.
func MaskEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldMask, v))
}

// MaskContainsFold applies the ContainsFold predicate on the "mask" field.
func MaskContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldMask, v))
}

// GatewayEQ applies the EQ predicate on the "gateway" field.
func GatewayEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldGateway, v))
}

// GatewayNEQ applies the NEQ predicate on the "gateway" field.
func GatewayNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldGateway, v))
}

// GatewayIn applies the In predicate on the "gateway" field.
func GatewayIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldGateway, vs...))
}

// GatewayNotIn applies the NotIn predicate on the "gateway" field.
func GatewayNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldGateway, vs...))
}

// GatewayGT applies the GT predicate on the "gateway" field.
func GatewayGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldGateway, v))
}

// GatewayGTE applies the GTE predicate on the "gateway" field.
func GatewayGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldGateway, v))
}

// GatewayLT applies the LT predicate on the "gateway" field.
func GatewayLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldGateway, v))
}

// GatewayLTE applies the LTE predicate on the "gateway" field.
func GatewayLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldGateway, v))
}

// GatewayContains applies the Contains predicate on the "gateway" field.
func GatewayContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldGateway, v))
}

// GatewayHasPrefix applies the HasPrefix predicate on the "gateway" field.
func GatewayHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldGateway, v))
}

// GatewayHasSuffix applies the HasSuffix predicate on the "gateway" field.
func GatewayHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldGateway, v))
}

// GatewayEqualFold applies the EqualFold predicate on the "gateway" field.
func GatewayEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldGateway, v))
}

// GatewayContainsFold applies the ContainsFold predicate on the "gateway" field.
func GatewayContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldGateway, v))
}

// OnlineTimeEQ applies the EQ predicate on the "online_time" field.
func OnlineTimeEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldOnlineTime, v))
}

// OnlineTimeNEQ applies the NEQ predicate on the "online_time" field.
func OnlineTimeNEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldOnlineTime, v))
}

// OnlineTimeIn applies the In predicate on the "online_time" field.
func OnlineTimeIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldOnlineTime, vs...))
}

// OnlineTimeNotIn applies the NotIn predicate on the "online_time" field.
func OnlineTimeNotIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldOnlineTime, vs...))
}

// OnlineTimeGT applies the GT predicate on the "online_time" field.
func OnlineTimeGT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldOnlineTime, v))
}

// OnlineTimeGTE applies the GTE predicate on the "online_time" field.
func OnlineTimeGTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldOnlineTime, v))
}

// OnlineTimeLT applies the LT predicate on the "online_time" field.
func OnlineTimeLT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldOnlineTime, v))
}

// OnlineTimeLTE applies the LTE predicate on the "online_time" field.
func OnlineTimeLTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldOnlineTime, v))
}

// OfflineTimeEQ applies the EQ predicate on the "offline_time" field.
func OfflineTimeEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldOfflineTime, v))
}

// OfflineTimeNEQ applies the NEQ predicate on the "offline_time" field.
func OfflineTimeNEQ(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldOfflineTime, v))
}

// OfflineTimeIn applies the In predicate on the "offline_time" field.
func OfflineTimeIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldOfflineTime, vs...))
}

// OfflineTimeNotIn applies the NotIn predicate on the "offline_time" field.
func OfflineTimeNotIn(vs ...time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldOfflineTime, vs...))
}

// OfflineTimeGT applies the GT predicate on the "offline_time" field.
func OfflineTimeGT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldOfflineTime, v))
}

// OfflineTimeGTE applies the GTE predicate on the "offline_time" field.
func OfflineTimeGTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldOfflineTime, v))
}

// OfflineTimeLT applies the LT predicate on the "offline_time" field.
func OfflineTimeLT(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldOfflineTime, v))
}

// OfflineTimeLTE applies the LTE predicate on the "offline_time" field.
func OfflineTimeLTE(v time.Time) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldOfflineTime, v))
}

// IsLeisureEQ applies the EQ predicate on the "is_leisure" field.
func IsLeisureEQ(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldIsLeisure, v))
}

// IsLeisureNEQ applies the NEQ predicate on the "is_leisure" field.
func IsLeisureNEQ(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldIsLeisure, v))
}

// IsLeisureIn applies the In predicate on the "is_leisure" field.
func IsLeisureIn(vs ...uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldIsLeisure, vs...))
}

// IsLeisureNotIn applies the NotIn predicate on the "is_leisure" field.
func IsLeisureNotIn(vs ...uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldIsLeisure, vs...))
}

// IsLeisureGT applies the GT predicate on the "is_leisure" field.
func IsLeisureGT(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldIsLeisure, v))
}

// IsLeisureGTE applies the GTE predicate on the "is_leisure" field.
func IsLeisureGTE(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldIsLeisure, v))
}

// IsLeisureLT applies the LT predicate on the "is_leisure" field.
func IsLeisureLT(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldIsLeisure, v))
}

// IsLeisureLTE applies the LTE predicate on the "is_leisure" field.
func IsLeisureLTE(v uint) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldIsLeisure, v))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldNotIn(FieldDeviceType, vs...))
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGT(FieldDeviceType, v))
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldGTE(FieldDeviceType, v))
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLT(FieldDeviceType, v))
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldLTE(FieldDeviceType, v))
}

// DeviceTypeContains applies the Contains predicate on the "device_type" field.
func DeviceTypeContains(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContains(FieldDeviceType, v))
}

// DeviceTypeHasPrefix applies the HasPrefix predicate on the "device_type" field.
func DeviceTypeHasPrefix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasPrefix(FieldDeviceType, v))
}

// DeviceTypeHasSuffix applies the HasSuffix predicate on the "device_type" field.
func DeviceTypeHasSuffix(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldHasSuffix(FieldDeviceType, v))
}

// DeviceTypeEqualFold applies the EqualFold predicate on the "device_type" field.
func DeviceTypeEqualFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldEqualFold(FieldDeviceType, v))
}

// DeviceTypeContainsFold applies the ContainsFold predicate on the "device_type" field.
func DeviceTypeContainsFold(v string) predicate.CmdbIp {
	return predicate.CmdbIp(sql.FieldContainsFold(FieldDeviceType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CmdbIp) predicate.CmdbIp {
	return predicate.CmdbIp(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CmdbIp) predicate.CmdbIp {
	return predicate.CmdbIp(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CmdbIp) predicate.CmdbIp {
	return predicate.CmdbIp(sql.NotPredicates(p))
}
