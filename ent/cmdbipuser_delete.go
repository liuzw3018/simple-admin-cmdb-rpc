// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/cmdbipuser"
	"github.com/liuzw3018/simple-admin-cmdb-rpc/ent/predicate"
)

// CmdbIpUserDelete is the builder for deleting a CmdbIpUser entity.
type CmdbIpUserDelete struct {
	config
	hooks    []Hook
	mutation *CmdbIpUserMutation
}

// Where appends a list predicates to the CmdbIpUserDelete builder.
func (ciud *CmdbIpUserDelete) Where(ps ...predicate.CmdbIpUser) *CmdbIpUserDelete {
	ciud.mutation.Where(ps...)
	return ciud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ciud *CmdbIpUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ciud.sqlExec, ciud.mutation, ciud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ciud *CmdbIpUserDelete) ExecX(ctx context.Context) int {
	n, err := ciud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ciud *CmdbIpUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cmdbipuser.Table, sqlgraph.NewFieldSpec(cmdbipuser.FieldID, field.TypeUint64))
	if ps := ciud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ciud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ciud.mutation.done = true
	return affected, err
}

// CmdbIpUserDeleteOne is the builder for deleting a single CmdbIpUser entity.
type CmdbIpUserDeleteOne struct {
	ciud *CmdbIpUserDelete
}

// Where appends a list predicates to the CmdbIpUserDelete builder.
func (ciudo *CmdbIpUserDeleteOne) Where(ps ...predicate.CmdbIpUser) *CmdbIpUserDeleteOne {
	ciudo.ciud.mutation.Where(ps...)
	return ciudo
}

// Exec executes the deletion query.
func (ciudo *CmdbIpUserDeleteOne) Exec(ctx context.Context) error {
	n, err := ciudo.ciud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cmdbipuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ciudo *CmdbIpUserDeleteOne) ExecX(ctx context.Context) {
	if err := ciudo.Exec(ctx); err != nil {
		panic(err)
	}
}
